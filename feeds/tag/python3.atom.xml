<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrew T. Crooks - python3</title><link href="http://www.andrewtcrooks.com/" rel="alternate"></link><link href="http://www.andrewtcrooks.com/feeds/tag/python3.atom.xml" rel="self"></link><id>http://www.andrewtcrooks.com/</id><updated>2018-01-15T00:00:00-08:00</updated><entry><title>Indeed Job Scraper</title><link href="http://www.andrewtcrooks.com/2018/01/15/indeed-job-scraper/" rel="alternate"></link><published>2018-01-15T00:00:00-08:00</published><updated>2018-01-15T00:00:00-08:00</updated><author><name>Andrew C.</name></author><id>tag:www.andrewtcrooks.com,2018-01-15:/2018/01/15/indeed-job-scraper/</id><summary type="html">&lt;p&gt;Indeed job scraper wth extra filtering options not found on Indeed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="ignore"&gt;ignore&lt;a class="anchor-link" href="#ignore"&gt;¶&lt;/a&gt;&lt;/h1&gt;&lt;h1 id="Indeed-Job-Scraper"&gt;Indeed Job Scraper&lt;a class="anchor-link" href="#Indeed-Job-Scraper"&gt;¶&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Purpose of project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Done - create a web scraper that will fetch just the ads specified and none of the "sponsored" junk or recruiter postings.&lt;/li&gt;
&lt;li&gt;scans descriptions with bs4 looking for specific keywords chosen by the user&lt;/li&gt;
&lt;li&gt;Will allow to filter 'data scientist' jobs by the who are looking for Python and R skills specifically but not things like hadoop or scala or spark&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Indeed-Job-Scraper"&gt;Indeed Job Scraper&lt;a class="anchor-link" href="#Indeed-Job-Scraper"&gt;¶&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;What is does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fetches jobs based on search query, cleans the data, and filters out unwanted jobs that Indeed won't filter for you. Inheretly, this fetches just the ads specified and none of the "sponsored" junk or recruiter postings you often see on Indeed.com.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Returns a histogram of filtered posts by posting date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;Will allow to filter 'data scientist' jobs by the who are looking for Python and R skills specifically but not things like hadoop or scala or spark&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ipython_bell&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;config&lt;/span&gt; InlineBackend.figure_format = 'svg'
&lt;span class="c1"&gt;# %config InlineBackend.figure_format = 'retina'\&lt;/span&gt;
        
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;bell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;done
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""Job Scrape Package."""&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.ticker&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MaxNLocator&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JobScrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Job Scrape Object."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python+developer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_days_posted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;region_city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Seattle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'WA'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;local_city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Seattle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;job_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fulltime'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Initialize JobScrape object."""&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;region_city&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;',+'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;region_state&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort_by&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job_type&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_days_posted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_days_posted&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_city&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean_results&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_results&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Report job finished&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Job Scrape Finished.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Get job search results."""&lt;/span&gt;
        &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'max_colwidth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# to remove column limit&lt;/span&gt;

        &lt;span class="c1"&gt;# Generate base url string.&lt;/span&gt;
        &lt;span class="n"&gt;url_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://www.indeed.com/jobs'&lt;/span&gt;
                     &lt;span class="s1"&gt;'?q=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                     &lt;span class="s1"&gt;'&amp;jt=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                     &lt;span class="s1"&gt;'&amp;sort=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                     &lt;span class="s1"&gt;'&amp;l=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                     &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
                              &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Make soup from first page.&lt;/span&gt;
        &lt;span class="n"&gt;url_count_http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;soup_for_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_count_http&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Get number of pages of results and display.&lt;/span&gt;
        &lt;span class="n"&gt;results_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup_for_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'searchCount'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;number_of_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results_number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Scraping "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" results"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Loop through the pages, scraping 100 results at a time.&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_results&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page_number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Parse a single page of 100 job listings."""&lt;/span&gt;
        &lt;span class="n"&gt;url_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://www.indeed.com/jobs'&lt;/span&gt;
                       &lt;span class="s1"&gt;'?q=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                       &lt;span class="s1"&gt;'&amp;jt=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                       &lt;span class="s1"&gt;'&amp;sort=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                       &lt;span class="s1"&gt;'&amp;l=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                       &lt;span class="s1"&gt;'&amp;limit=100'&lt;/span&gt;
                       &lt;span class="s1"&gt;'&amp;start=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                       &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;page_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;url_results_http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;soup_for_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_results_http&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Store the 100 job listings on the page&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup_for_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'data-tn-component'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'organicJob'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c1"&gt;# Parse each job listing and add details to self.jobs DataFrame&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_page_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_page_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Add each element to self.jobs."""&lt;/span&gt;
        &lt;span class="c1"&gt;# print(elem)&lt;/span&gt;
        &lt;span class="c1"&gt;# print(elem.find('span', attrs={&lt;/span&gt;
        &lt;span class="c1"&gt;#     'itemprop':'name'}).text.strip())&lt;/span&gt;
        &lt;span class="c1"&gt;# remove this line after testing is finished&lt;/span&gt;
        &lt;span class="n"&gt;comp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'company'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;job_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
                              &lt;span class="s1"&gt;'turnstileLink'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# job_title = elem.find('a', attrs={'&lt;/span&gt;
        &lt;span class="c1"&gt;#   data-tn-element': "jobTitle"}).text.strip().capitalize()&lt;/span&gt;
        &lt;span class="n"&gt;home_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://www.indeed.com'&lt;/span&gt;
        &lt;span class="n"&gt;job_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'h2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'jobtitle'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# job_link = "https://www.indeed.com" + elem.find('h2',&lt;/span&gt;
        &lt;span class="c1"&gt;#     attrs={"class": "jobtitle"}).find('a')['href']&lt;/span&gt;
        &lt;span class="n"&gt;job_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'location'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;job_posted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'h2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'jobtitle'&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;days_posted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_days_posted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_posted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Create Javascript page scraper for use later&lt;/span&gt;
        &lt;span class="c1"&gt;# to parse job descriptions&lt;/span&gt;
        &lt;span class="c1"&gt;# scraper = JobDescScrape()&lt;/span&gt;
        &lt;span class="c1"&gt;# Job Description Parser&lt;/span&gt;
        &lt;span class="n"&gt;job_desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="c1"&gt;# job_desc = scraper.scrape(job_link)&lt;/span&gt;

        &lt;span class="n"&gt;comp_link_overall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'itemprop'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="c1"&gt;# if company link exists, access it. Otherwise, skip.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;comp_link_overall&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;comp_link_overall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;home_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp_link_overall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;comp_link_overall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;# add job info to jobs DataFrame&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'comp_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;comp_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'job_link'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job_link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'job_posted'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job_posted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'overall_link'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;comp_link_overall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'job_location'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'job_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;days_posted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="s1"&gt;'job_desc'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job_desc&lt;/span&gt;
                                      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;ignore_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Clean duplicate results"""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Cleaning and formatting'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;'job_location'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;'comp_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;'job_link'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;'job_desc'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="c1"&gt;# format links into clickable hyperlinks&lt;/span&gt;
        &lt;span class="c1"&gt;# self.jobs['job_link'] =&lt;/span&gt;
        &lt;span class="c1"&gt;# self.jobs['job_link'].apply(lambda x:&lt;/span&gt;
        &lt;span class="c1"&gt;# '&lt;a href="{}"&gt;{}&lt;/a&gt;'.format(x,x))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Filter unwanted results"""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Filtering'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_days_posted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_location'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' ll'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' lll'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' lv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' v'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' II'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' III'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' IV'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' V'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' 3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' 4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' 5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Plot histogram of # of posts per day for the past 30 days."""&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
        
        &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"axes.labelsize"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
        
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Plotting histogram of postings'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;date_max_days_posted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_ndays_ago&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_days_posted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Make plot&lt;/span&gt;
        &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;bins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_days_posted&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;countplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bins&lt;/span&gt;
                           &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;query_include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+-'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;query_exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' -'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+-'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_include&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' Jobs'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;( '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;query_exclude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' )'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
                 &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;  City: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_city&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'    '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                 &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Region: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                 &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;Frequency of Posts - %b &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;graph_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_max_days_posted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                               &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' to %b &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;xlabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Number of days since posting'&lt;/span&gt;
        &lt;span class="n"&gt;ylabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Number of postings'&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xticklabels&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Total Jobs: '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="n"&gt;horizontalalignment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'right'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;verticalalignment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'top'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transAxes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        &lt;span class="c1"&gt;# Force y-axis to make tick marks at integers (overrides default float)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_major_locator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MaxNLocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        
        &lt;span class="c1"&gt;# Make x-axis read from right to left&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invert_xaxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_days_posted&lt;/span&gt; &lt;span class="o"&gt;&gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xticklabels&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        
        &lt;span class="c1"&gt;# Make ymax just a little bigger than max bin size&lt;/span&gt;
        &lt;span class="n"&gt;xmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.05&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        &lt;span class="c1"&gt;# Show plot&lt;/span&gt;
        &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;date_ndays_ago&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''Return date n-days ago and current date.'''&lt;/span&gt;
        &lt;span class="n"&gt;current_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;date_n_days_ago&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;date_n_days_ago&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_days_posted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_posted&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Convert non-numerical 'days posted' into a number."""&lt;/span&gt;
        &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job_posted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Just'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Today'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'30+'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JobDescScrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Job Description Object."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Initialize PhantomJS driver to load JS redirect links."""&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_window_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scrape_link&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scrape_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Scrape description from link."""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;noodles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noodles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Job Description Parser Settings between here and return&lt;/span&gt;
        &lt;span class="c1"&gt;# select tags based on base url&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"icims.com"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'on the right track'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;soup_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;soup_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'li'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="c1"&gt;# join the array elements (i.e. the array of tags and contents)&lt;/span&gt;
        &lt;span class="n"&gt;job_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup_filter&lt;/span&gt;
                                      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;&gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="c1"&gt;# Cut junk after add based on base url&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'https://tableau'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;job_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job_description&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Tableau Software is a company on a mission'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# removes any whitespace between two new lines&lt;/span&gt;
        &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'\n\s*\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'\n\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job_description&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;job_description&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'docstring'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;docstring
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;jobsc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JobScrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python+developer+-senior+-sr.+-amazon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="n"&gt;region_city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Seattle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="n"&gt;region_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'WA'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;local_city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Seattle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="n"&gt;job_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fulltime'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;max_days_posted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;
                  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jobsc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;histogram&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;bell&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jobsc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'days_posted'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'job_title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'job_location'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'comp_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'job_desc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'job_link'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'job_description'&lt;/span&gt;
                    &lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Scraping 507 results
Cleaning and formatting
Filtering
Job Scrape Finished.
Plotting histogram of postings
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_svg output_subarea "&gt;
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Created with matplotlib (http://matplotlib.org/) --&gt;
&lt;svg height="357pt" version="1.1" viewbox="0 0 375 357" width="375pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs&gt;
&lt;style type="text/css"&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
&lt;/defs&gt;
&lt;g id="figure_1"&gt;
&lt;g id="patch_1"&gt;
&lt;path d="M 0 357.68351 
L 375.145312 357.68351 
L 375.145312 0 
L 0 0 
z
" style="fill:#ffffff;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="axes_1"&gt;
&lt;g id="patch_2"&gt;
&lt;path d="M 33.145313 316.618125 
L 367.945312 316.618125 
L 367.945312 99.178125 
L 33.145313 99.178125 
z
" style="fill:#ffffff;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="matplotlib.axis_1"&gt;
&lt;g id="xtick_1"&gt;
&lt;g id="line2d_1"&gt;&lt;/g&gt;
&lt;g id="text_1"&gt;
&lt;!-- 0 --&gt;
&lt;defs&gt;
&lt;path d="M 4.15625 35.296875 
Q 4.15625 48 6.765625 55.734375 
Q 9.375 63.484375 14.515625 67.671875 
Q 19.671875 71.875 27.484375 71.875 
Q 33.25 71.875 37.59375 69.546875 
Q 41.9375 67.234375 44.765625 62.859375 
Q 47.609375 58.5 49.21875 52.21875 
Q 50.828125 45.953125 50.828125 35.296875 
Q 50.828125 22.703125 48.234375 14.96875 
Q 45.65625 7.234375 40.5 3 
Q 35.359375 -1.21875 27.484375 -1.21875 
Q 17.140625 -1.21875 11.234375 6.203125 
Q 4.15625 15.140625 4.15625 35.296875 
z
M 13.1875 35.296875 
Q 13.1875 17.671875 17.3125 11.828125 
Q 21.4375 6 27.484375 6 
Q 33.546875 6 37.671875 11.859375 
Q 41.796875 17.71875 41.796875 35.296875 
Q 41.796875 52.984375 37.671875 58.78125 
Q 33.546875 64.59375 27.390625 64.59375 
Q 21.34375 64.59375 17.71875 59.46875 
Q 13.1875 52.9375 13.1875 35.296875 
z
" id="ArialMT-30"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(351.611752 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-30"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_2"&gt;
&lt;g id="line2d_2"&gt;&lt;/g&gt;
&lt;g id="text_2"&gt;
&lt;!-- 1 --&gt;
&lt;defs&gt;
&lt;path d="M 37.25 0 
L 28.46875 0 
L 28.46875 56 
Q 25.296875 52.984375 20.140625 49.953125 
Q 14.984375 46.921875 10.890625 45.40625 
L 10.890625 53.90625 
Q 18.265625 57.375 23.78125 62.296875 
Q 29.296875 67.234375 31.59375 71.875 
L 37.25 71.875 
z
" id="ArialMT-31"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(321.175389 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-31"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_3"&gt;
&lt;g id="line2d_3"&gt;&lt;/g&gt;
&lt;g id="text_3"&gt;
&lt;!-- 2 --&gt;
&lt;defs&gt;
&lt;path d="M 50.34375 8.453125 
L 50.34375 0 
L 3.03125 0 
Q 2.9375 3.171875 4.046875 6.109375 
Q 5.859375 10.9375 9.828125 15.625 
Q 13.8125 20.3125 21.34375 26.46875 
Q 33.015625 36.03125 37.109375 41.625 
Q 41.21875 47.21875 41.21875 52.203125 
Q 41.21875 57.421875 37.46875 61 
Q 33.734375 64.59375 27.734375 64.59375 
Q 21.390625 64.59375 17.578125 60.78125 
Q 13.765625 56.984375 13.71875 50.25 
L 4.6875 51.171875 
Q 5.609375 61.28125 11.65625 66.578125 
Q 17.71875 71.875 27.9375 71.875 
Q 38.234375 71.875 44.234375 66.15625 
Q 50.25 60.453125 50.25 52 
Q 50.25 47.703125 48.484375 43.546875 
Q 46.734375 39.40625 42.65625 34.8125 
Q 38.578125 30.21875 29.109375 22.21875 
Q 21.1875 15.578125 18.9375 13.203125 
Q 16.703125 10.84375 15.234375 8.453125 
z
" id="ArialMT-32"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(290.739025 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-32"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_4"&gt;
&lt;g id="line2d_4"&gt;&lt;/g&gt;
&lt;g id="text_4"&gt;
&lt;!-- 3 --&gt;
&lt;defs&gt;
&lt;path d="M 4.203125 18.890625 
L 12.984375 20.0625 
Q 14.5 12.59375 18.140625 9.296875 
Q 21.78125 6 27 6 
Q 33.203125 6 37.46875 10.296875 
Q 41.75 14.59375 41.75 20.953125 
Q 41.75 27 37.796875 30.921875 
Q 33.84375 34.859375 27.734375 34.859375 
Q 25.25 34.859375 21.53125 33.890625 
L 22.515625 41.609375 
Q 23.390625 41.5 23.921875 41.5 
Q 29.546875 41.5 34.03125 44.421875 
Q 38.53125 47.359375 38.53125 53.46875 
Q 38.53125 58.296875 35.25 61.46875 
Q 31.984375 64.65625 26.8125 64.65625 
Q 21.6875 64.65625 18.265625 61.421875 
Q 14.84375 58.203125 13.875 51.765625 
L 5.078125 53.328125 
Q 6.6875 62.15625 12.390625 67.015625 
Q 18.109375 71.875 26.609375 71.875 
Q 32.46875 71.875 37.390625 69.359375 
Q 42.328125 66.84375 44.9375 62.5 
Q 47.5625 58.15625 47.5625 53.265625 
Q 47.5625 48.640625 45.0625 44.828125 
Q 42.578125 41.015625 37.703125 38.765625 
Q 44.046875 37.3125 47.5625 32.6875 
Q 51.078125 28.078125 51.078125 21.140625 
Q 51.078125 11.765625 44.234375 5.25 
Q 37.40625 -1.265625 26.953125 -1.265625 
Q 17.53125 -1.265625 11.296875 4.34375 
Q 5.078125 9.96875 4.203125 18.890625 
z
" id="ArialMT-33"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(260.302661 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-33"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_5"&gt;
&lt;g id="line2d_5"&gt;&lt;/g&gt;
&lt;g id="text_5"&gt;
&lt;!-- 4 --&gt;
&lt;defs&gt;
&lt;path d="M 32.328125 0 
L 32.328125 17.140625 
L 1.265625 17.140625 
L 1.265625 25.203125 
L 33.9375 71.578125 
L 41.109375 71.578125 
L 41.109375 25.203125 
L 50.78125 25.203125 
L 50.78125 17.140625 
L 41.109375 17.140625 
L 41.109375 0 
z
M 32.328125 25.203125 
L 32.328125 57.46875 
L 9.90625 25.203125 
z
" id="ArialMT-34"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(229.866298 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-34"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_6"&gt;
&lt;g id="line2d_6"&gt;&lt;/g&gt;
&lt;g id="text_6"&gt;
&lt;!-- 5 --&gt;
&lt;defs&gt;
&lt;path d="M 4.15625 18.75 
L 13.375 19.53125 
Q 14.40625 12.796875 18.140625 9.390625 
Q 21.875 6 27.15625 6 
Q 33.5 6 37.890625 10.78125 
Q 42.28125 15.578125 42.28125 23.484375 
Q 42.28125 31 38.0625 35.34375 
Q 33.84375 39.703125 27 39.703125 
Q 22.75 39.703125 19.328125 37.765625 
Q 15.921875 35.84375 13.96875 32.765625 
L 5.71875 33.84375 
L 12.640625 70.609375 
L 48.25 70.609375 
L 48.25 62.203125 
L 19.671875 62.203125 
L 15.828125 42.96875 
Q 22.265625 47.46875 29.34375 47.46875 
Q 38.71875 47.46875 45.15625 40.96875 
Q 51.609375 34.46875 51.609375 24.265625 
Q 51.609375 14.546875 45.953125 7.46875 
Q 39.0625 -1.21875 27.15625 -1.21875 
Q 17.390625 -1.21875 11.203125 4.25 
Q 5.03125 9.71875 4.15625 18.75 
z
" id="ArialMT-35"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(199.429934 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-35"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_7"&gt;
&lt;g id="line2d_7"&gt;&lt;/g&gt;
&lt;g id="text_7"&gt;
&lt;!-- 6 --&gt;
&lt;defs&gt;
&lt;path d="M 49.75 54.046875 
L 41.015625 53.375 
Q 39.84375 58.546875 37.703125 60.890625 
Q 34.125 64.65625 28.90625 64.65625 
Q 24.703125 64.65625 21.53125 62.3125 
Q 17.390625 59.28125 14.984375 53.46875 
Q 12.59375 47.65625 12.5 36.921875 
Q 15.671875 41.75 20.265625 44.09375 
Q 24.859375 46.4375 29.890625 46.4375 
Q 38.671875 46.4375 44.84375 39.96875 
Q 51.03125 33.5 51.03125 23.25 
Q 51.03125 16.5 48.125 10.71875 
Q 45.21875 4.9375 40.140625 1.859375 
Q 35.0625 -1.21875 28.609375 -1.21875 
Q 17.625 -1.21875 10.6875 6.859375 
Q 3.765625 14.9375 3.765625 33.5 
Q 3.765625 54.25 11.421875 63.671875 
Q 18.109375 71.875 29.4375 71.875 
Q 37.890625 71.875 43.28125 67.140625 
Q 48.6875 62.40625 49.75 54.046875 
z
M 13.875 23.1875 
Q 13.875 18.65625 15.796875 14.5 
Q 17.71875 10.359375 21.1875 8.171875 
Q 24.65625 6 28.46875 6 
Q 34.03125 6 38.03125 10.484375 
Q 42.046875 14.984375 42.046875 22.703125 
Q 42.046875 30.125 38.078125 34.390625 
Q 34.125 38.671875 28.125 38.671875 
Q 22.171875 38.671875 18.015625 34.390625 
Q 13.875 30.125 13.875 23.1875 
z
" id="ArialMT-36"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(168.99357 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-36"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_8"&gt;
&lt;g id="line2d_8"&gt;&lt;/g&gt;
&lt;g id="text_8"&gt;
&lt;!-- 7 --&gt;
&lt;defs&gt;
&lt;path d="M 4.734375 62.203125 
L 4.734375 70.65625 
L 51.078125 70.65625 
L 51.078125 63.8125 
Q 44.234375 56.546875 37.515625 44.484375 
Q 30.8125 32.421875 27.15625 19.671875 
Q 24.515625 10.6875 23.78125 0 
L 14.75 0 
Q 14.890625 8.453125 18.0625 20.40625 
Q 21.234375 32.375 27.171875 43.484375 
Q 33.109375 54.59375 39.796875 62.203125 
z
" id="ArialMT-37"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(138.557207 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-37"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_9"&gt;
&lt;g id="line2d_9"&gt;&lt;/g&gt;
&lt;g id="text_9"&gt;
&lt;!-- 8 --&gt;
&lt;defs&gt;
&lt;path d="M 17.671875 38.8125 
Q 12.203125 40.828125 9.5625 44.53125 
Q 6.9375 48.25 6.9375 53.421875 
Q 6.9375 61.234375 12.546875 66.546875 
Q 18.171875 71.875 27.484375 71.875 
Q 36.859375 71.875 42.578125 66.421875 
Q 48.296875 60.984375 48.296875 53.171875 
Q 48.296875 48.1875 45.671875 44.5 
Q 43.0625 40.828125 37.75 38.8125 
Q 44.34375 36.671875 47.78125 31.875 
Q 51.21875 27.09375 51.21875 20.453125 
Q 51.21875 11.28125 44.71875 5.03125 
Q 38.234375 -1.21875 27.640625 -1.21875 
Q 17.046875 -1.21875 10.546875 5.046875 
Q 4.046875 11.328125 4.046875 20.703125 
Q 4.046875 27.6875 7.59375 32.390625 
Q 11.140625 37.109375 17.671875 38.8125 
z
M 15.921875 53.71875 
Q 15.921875 48.640625 19.1875 45.40625 
Q 22.46875 42.1875 27.6875 42.1875 
Q 32.765625 42.1875 36.015625 45.375 
Q 39.265625 48.578125 39.265625 53.21875 
Q 39.265625 58.0625 35.90625 61.359375 
Q 32.5625 64.65625 27.59375 64.65625 
Q 22.5625 64.65625 19.234375 61.421875 
Q 15.921875 58.203125 15.921875 53.71875 
z
M 13.09375 20.65625 
Q 13.09375 16.890625 14.875 13.375 
Q 16.65625 9.859375 20.171875 7.921875 
Q 23.6875 6 27.734375 6 
Q 34.03125 6 38.125 10.046875 
Q 42.234375 14.109375 42.234375 20.359375 
Q 42.234375 26.703125 38.015625 30.859375 
Q 33.796875 35.015625 27.4375 35.015625 
Q 21.234375 35.015625 17.15625 30.90625 
Q 13.09375 26.8125 13.09375 20.65625 
z
" id="ArialMT-38"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(108.120843 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-38"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_10"&gt;
&lt;g id="line2d_10"&gt;&lt;/g&gt;
&lt;g id="text_10"&gt;
&lt;!-- 9 --&gt;
&lt;defs&gt;
&lt;path d="M 5.46875 16.546875 
L 13.921875 17.328125 
Q 14.984375 11.375 18.015625 8.6875 
Q 21.046875 6 25.78125 6 
Q 29.828125 6 32.875 7.859375 
Q 35.9375 9.71875 37.890625 12.8125 
Q 39.84375 15.921875 41.15625 21.1875 
Q 42.484375 26.46875 42.484375 31.9375 
Q 42.484375 32.515625 42.4375 33.6875 
Q 39.796875 29.5 35.234375 26.875 
Q 30.671875 24.265625 25.34375 24.265625 
Q 16.453125 24.265625 10.296875 30.703125 
Q 4.15625 37.15625 4.15625 47.703125 
Q 4.15625 58.59375 10.578125 65.234375 
Q 17 71.875 26.65625 71.875 
Q 33.640625 71.875 39.421875 68.109375 
Q 45.21875 64.359375 48.21875 57.390625 
Q 51.21875 50.4375 51.21875 37.25 
Q 51.21875 23.53125 48.234375 15.40625 
Q 45.265625 7.28125 39.375 3.03125 
Q 33.5 -1.21875 25.59375 -1.21875 
Q 17.1875 -1.21875 11.859375 3.4375 
Q 6.546875 8.109375 5.46875 16.546875 
z
M 41.453125 48.140625 
Q 41.453125 55.71875 37.421875 60.15625 
Q 33.40625 64.59375 27.734375 64.59375 
Q 21.875 64.59375 17.53125 59.8125 
Q 13.1875 55.03125 13.1875 47.40625 
Q 13.1875 40.578125 17.3125 36.296875 
Q 21.4375 32.03125 27.484375 32.03125 
Q 33.59375 32.03125 37.515625 36.296875 
Q 41.453125 40.578125 41.453125 48.140625 
z
" id="ArialMT-39"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(77.68448 332.597441)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-39"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_11"&gt;
&lt;g id="line2d_11"&gt;&lt;/g&gt;
&lt;g id="text_11"&gt;
&lt;!-- 10 --&gt;
&lt;g style="fill:#262626;" transform="translate(44.840159 335.37791)rotate(-30)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-31"&gt;&lt;/use&gt;
&lt;use x="55.615234" xlink:href="#ArialMT-30"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_12"&gt;
&lt;!-- Number of days since posting --&gt;
&lt;defs&gt;
&lt;path d="M 7.625 0 
L 7.625 71.578125 
L 17.328125 71.578125 
L 54.9375 15.375 
L 54.9375 71.578125 
L 64.015625 71.578125 
L 64.015625 0 
L 54.296875 0 
L 16.703125 56.25 
L 16.703125 0 
z
" id="ArialMT-4e"&gt;&lt;/path&gt;
&lt;path d="M 40.578125 0 
L 40.578125 7.625 
Q 34.515625 -1.171875 24.125 -1.171875 
Q 19.53125 -1.171875 15.546875 0.578125 
Q 11.578125 2.34375 9.640625 5 
Q 7.71875 7.671875 6.9375 11.53125 
Q 6.390625 14.109375 6.390625 19.734375 
L 6.390625 51.859375 
L 15.1875 51.859375 
L 15.1875 23.09375 
Q 15.1875 16.21875 15.71875 13.8125 
Q 16.546875 10.359375 19.234375 8.375 
Q 21.921875 6.390625 25.875 6.390625 
Q 29.828125 6.390625 33.296875 8.421875 
Q 36.765625 10.453125 38.203125 13.9375 
Q 39.65625 17.4375 39.65625 24.078125 
L 39.65625 51.859375 
L 48.4375 51.859375 
L 48.4375 0 
z
" id="ArialMT-75"&gt;&lt;/path&gt;
&lt;path d="M 6.59375 0 
L 6.59375 51.859375 
L 14.453125 51.859375 
L 14.453125 44.578125 
Q 16.890625 48.390625 20.9375 50.703125 
Q 25 53.03125 30.171875 53.03125 
Q 35.9375 53.03125 39.625 50.640625 
Q 43.3125 48.25 44.828125 43.953125 
Q 50.984375 53.03125 60.84375 53.03125 
Q 68.5625 53.03125 72.703125 48.75 
Q 76.859375 44.484375 76.859375 35.59375 
L 76.859375 0 
L 68.109375 0 
L 68.109375 32.671875 
Q 68.109375 37.9375 67.25 40.25 
Q 66.40625 42.578125 64.15625 43.984375 
Q 61.921875 45.40625 58.890625 45.40625 
Q 53.421875 45.40625 49.796875 41.765625 
Q 46.1875 38.140625 46.1875 30.125 
L 46.1875 0 
L 37.40625 0 
L 37.40625 33.6875 
Q 37.40625 39.546875 35.25 42.46875 
Q 33.109375 45.40625 28.21875 45.40625 
Q 24.515625 45.40625 21.359375 43.453125 
Q 18.21875 41.5 16.796875 37.734375 
Q 15.375 33.984375 15.375 26.90625 
L 15.375 0 
z
" id="ArialMT-6d"&gt;&lt;/path&gt;
&lt;path d="M 14.703125 0 
L 6.546875 0 
L 6.546875 71.578125 
L 15.328125 71.578125 
L 15.328125 46.046875 
Q 20.90625 53.03125 29.546875 53.03125 
Q 34.328125 53.03125 38.59375 51.09375 
Q 42.875 49.171875 45.625 45.671875 
Q 48.390625 42.1875 49.953125 37.25 
Q 51.515625 32.328125 51.515625 26.703125 
Q 51.515625 13.375 44.921875 6.09375 
Q 38.328125 -1.171875 29.109375 -1.171875 
Q 19.921875 -1.171875 14.703125 6.5 
z
M 14.59375 26.3125 
Q 14.59375 17 17.140625 12.84375 
Q 21.296875 6.0625 28.375 6.0625 
Q 34.125 6.0625 38.328125 11.0625 
Q 42.53125 16.0625 42.53125 25.984375 
Q 42.53125 36.140625 38.5 40.96875 
Q 34.46875 45.796875 28.765625 45.796875 
Q 23 45.796875 18.796875 40.796875 
Q 14.59375 35.796875 14.59375 26.3125 
z
" id="ArialMT-62"&gt;&lt;/path&gt;
&lt;path d="M 42.09375 16.703125 
L 51.171875 15.578125 
Q 49.03125 7.625 43.21875 3.21875 
Q 37.40625 -1.171875 28.375 -1.171875 
Q 17 -1.171875 10.328125 5.828125 
Q 3.65625 12.84375 3.65625 25.484375 
Q 3.65625 38.578125 10.390625 45.796875 
Q 17.140625 53.03125 27.875 53.03125 
Q 38.28125 53.03125 44.875 45.953125 
Q 51.46875 38.875 51.46875 26.03125 
Q 51.46875 25.25 51.421875 23.6875 
L 12.75 23.6875 
Q 13.234375 15.140625 17.578125 10.59375 
Q 21.921875 6.0625 28.421875 6.0625 
Q 33.25 6.0625 36.671875 8.59375 
Q 40.09375 11.140625 42.09375 16.703125 
z
M 13.234375 30.90625 
L 42.1875 30.90625 
Q 41.609375 37.453125 38.875 40.71875 
Q 34.671875 45.796875 27.984375 45.796875 
Q 21.921875 45.796875 17.796875 41.75 
Q 13.671875 37.703125 13.234375 30.90625 
z
" id="ArialMT-65"&gt;&lt;/path&gt;
&lt;path d="M 6.5 0 
L 6.5 51.859375 
L 14.40625 51.859375 
L 14.40625 44 
Q 17.4375 49.515625 20 51.265625 
Q 22.5625 53.03125 25.640625 53.03125 
Q 30.078125 53.03125 34.671875 50.203125 
L 31.640625 42.046875 
Q 28.421875 43.953125 25.203125 43.953125 
Q 22.3125 43.953125 20.015625 42.21875 
Q 17.71875 40.484375 16.75 37.40625 
Q 15.28125 32.71875 15.28125 27.15625 
L 15.28125 0 
z
" id="ArialMT-72"&gt;&lt;/path&gt;
&lt;path id="ArialMT-20"&gt;&lt;/path&gt;
&lt;path d="M 3.328125 25.921875 
Q 3.328125 40.328125 11.328125 47.265625 
Q 18.015625 53.03125 27.640625 53.03125 
Q 38.328125 53.03125 45.109375 46.015625 
Q 51.90625 39.015625 51.90625 26.65625 
Q 51.90625 16.65625 48.90625 10.90625 
Q 45.90625 5.171875 40.15625 2 
Q 34.421875 -1.171875 27.640625 -1.171875 
Q 16.75 -1.171875 10.03125 5.8125 
Q 3.328125 12.796875 3.328125 25.921875 
z
M 12.359375 25.921875 
Q 12.359375 15.96875 16.703125 11.015625 
Q 21.046875 6.0625 27.640625 6.0625 
Q 34.1875 6.0625 38.53125 11.03125 
Q 42.875 16.015625 42.875 26.21875 
Q 42.875 35.84375 38.5 40.796875 
Q 34.125 45.75 27.640625 45.75 
Q 21.046875 45.75 16.703125 40.8125 
Q 12.359375 35.890625 12.359375 25.921875 
z
" id="ArialMT-6f"&gt;&lt;/path&gt;
&lt;path d="M 8.6875 0 
L 8.6875 45.015625 
L 0.921875 45.015625 
L 0.921875 51.859375 
L 8.6875 51.859375 
L 8.6875 57.375 
Q 8.6875 62.59375 9.625 65.140625 
Q 10.890625 68.5625 14.078125 70.671875 
Q 17.28125 72.796875 23.046875 72.796875 
Q 26.765625 72.796875 31.25 71.921875 
L 29.9375 64.265625 
Q 27.203125 64.75 24.75 64.75 
Q 20.75 64.75 19.09375 63.03125 
Q 17.4375 61.328125 17.4375 56.640625 
L 17.4375 51.859375 
L 27.546875 51.859375 
L 27.546875 45.015625 
L 17.4375 45.015625 
L 17.4375 0 
z
" id="ArialMT-66"&gt;&lt;/path&gt;
&lt;path d="M 40.234375 0 
L 40.234375 6.546875 
Q 35.296875 -1.171875 25.734375 -1.171875 
Q 19.53125 -1.171875 14.328125 2.25 
Q 9.125 5.671875 6.265625 11.796875 
Q 3.421875 17.921875 3.421875 25.875 
Q 3.421875 33.640625 6 39.96875 
Q 8.59375 46.296875 13.765625 49.65625 
Q 18.953125 53.03125 25.34375 53.03125 
Q 30.03125 53.03125 33.6875 51.046875 
Q 37.359375 49.078125 39.65625 45.90625 
L 39.65625 71.578125 
L 48.390625 71.578125 
L 48.390625 0 
z
M 12.453125 25.875 
Q 12.453125 15.921875 16.640625 10.984375 
Q 20.84375 6.0625 26.5625 6.0625 
Q 32.328125 6.0625 36.34375 10.765625 
Q 40.375 15.484375 40.375 25.140625 
Q 40.375 35.796875 36.265625 40.765625 
Q 32.171875 45.75 26.171875 45.75 
Q 20.3125 45.75 16.375 40.96875 
Q 12.453125 36.1875 12.453125 25.875 
z
" id="ArialMT-64"&gt;&lt;/path&gt;
&lt;path d="M 40.4375 6.390625 
Q 35.546875 2.25 31.03125 0.53125 
Q 26.515625 -1.171875 21.34375 -1.171875 
Q 12.796875 -1.171875 8.203125 3 
Q 3.609375 7.171875 3.609375 13.671875 
Q 3.609375 17.484375 5.34375 20.625 
Q 7.078125 23.78125 9.890625 25.6875 
Q 12.703125 27.59375 16.21875 28.5625 
Q 18.796875 29.25 24.03125 29.890625 
Q 34.671875 31.15625 39.703125 32.90625 
Q 39.75 34.71875 39.75 35.203125 
Q 39.75 40.578125 37.25 42.78125 
Q 33.890625 45.75 27.25 45.75 
Q 21.046875 45.75 18.09375 43.578125 
Q 15.140625 41.40625 13.71875 35.890625 
L 5.125 37.0625 
Q 6.296875 42.578125 8.984375 45.96875 
Q 11.671875 49.359375 16.75 51.1875 
Q 21.828125 53.03125 28.515625 53.03125 
Q 35.15625 53.03125 39.296875 51.46875 
Q 43.453125 49.90625 45.40625 47.53125 
Q 47.359375 45.171875 48.140625 41.546875 
Q 48.578125 39.3125 48.578125 33.453125 
L 48.578125 21.734375 
Q 48.578125 9.46875 49.140625 6.21875 
Q 49.703125 2.984375 51.375 0 
L 42.1875 0 
Q 40.828125 2.734375 40.4375 6.390625 
z
M 39.703125 26.03125 
Q 34.90625 24.078125 25.34375 22.703125 
Q 19.921875 21.921875 17.671875 20.9375 
Q 15.4375 19.96875 14.203125 18.09375 
Q 12.984375 16.21875 12.984375 13.921875 
Q 12.984375 10.40625 15.640625 8.0625 
Q 18.3125 5.71875 23.4375 5.71875 
Q 28.515625 5.71875 32.46875 7.9375 
Q 36.421875 10.15625 38.28125 14.015625 
Q 39.703125 17 39.703125 22.796875 
z
" id="ArialMT-61"&gt;&lt;/path&gt;
&lt;path d="M 6.203125 -19.96875 
L 5.21875 -11.71875 
Q 8.109375 -12.5 10.25 -12.5 
Q 13.1875 -12.5 14.9375 -11.515625 
Q 16.703125 -10.546875 17.828125 -8.796875 
Q 18.65625 -7.46875 20.515625 -2.25 
Q 20.75 -1.515625 21.296875 -0.09375 
L 1.609375 51.859375 
L 11.078125 51.859375 
L 21.875 21.828125 
Q 23.96875 16.109375 25.640625 9.8125 
Q 27.15625 15.875 29.25 21.625 
L 40.328125 51.859375 
L 49.125 51.859375 
L 29.390625 -0.875 
Q 26.21875 -9.421875 24.46875 -12.640625 
Q 22.125 -17 19.09375 -19.015625 
Q 16.0625 -21.046875 11.859375 -21.046875 
Q 9.328125 -21.046875 6.203125 -19.96875 
z
" id="ArialMT-79"&gt;&lt;/path&gt;
&lt;path d="M 3.078125 15.484375 
L 11.765625 16.84375 
Q 12.5 11.625 15.84375 8.84375 
Q 19.1875 6.0625 25.203125 6.0625 
Q 31.25 6.0625 34.171875 8.515625 
Q 37.109375 10.984375 37.109375 14.3125 
Q 37.109375 17.28125 34.515625 19 
Q 32.71875 20.171875 25.53125 21.96875 
Q 15.875 24.421875 12.140625 26.203125 
Q 8.40625 27.984375 6.46875 31.125 
Q 4.546875 34.28125 4.546875 38.09375 
Q 4.546875 41.546875 6.125 44.5 
Q 7.71875 47.46875 10.453125 49.421875 
Q 12.5 50.921875 16.03125 51.96875 
Q 19.578125 53.03125 23.640625 53.03125 
Q 29.734375 53.03125 34.34375 51.265625 
Q 38.96875 49.515625 41.15625 46.5 
Q 43.359375 43.5 44.1875 38.484375 
L 35.59375 37.3125 
Q 35.015625 41.3125 32.203125 43.546875 
Q 29.390625 45.796875 24.265625 45.796875 
Q 18.21875 45.796875 15.625 43.796875 
Q 13.03125 41.796875 13.03125 39.109375 
Q 13.03125 37.40625 14.109375 36.03125 
Q 15.1875 34.625 17.484375 33.6875 
Q 18.796875 33.203125 25.25 31.453125 
Q 34.578125 28.953125 38.25 27.359375 
Q 41.9375 25.78125 44.03125 22.75 
Q 46.140625 19.734375 46.140625 15.234375 
Q 46.140625 10.84375 43.578125 6.953125 
Q 41.015625 3.078125 36.171875 0.953125 
Q 31.34375 -1.171875 25.25 -1.171875 
Q 15.140625 -1.171875 9.84375 3.03125 
Q 4.546875 7.234375 3.078125 15.484375 
z
" id="ArialMT-73"&gt;&lt;/path&gt;
&lt;path d="M 6.640625 61.46875 
L 6.640625 71.578125 
L 15.4375 71.578125 
L 15.4375 61.46875 
z
M 6.640625 0 
L 6.640625 51.859375 
L 15.4375 51.859375 
L 15.4375 0 
z
" id="ArialMT-69"&gt;&lt;/path&gt;
&lt;path d="M 6.59375 0 
L 6.59375 51.859375 
L 14.5 51.859375 
L 14.5 44.484375 
Q 20.21875 53.03125 31 53.03125 
Q 35.6875 53.03125 39.625 51.34375 
Q 43.5625 49.65625 45.515625 46.921875 
Q 47.46875 44.1875 48.25 40.4375 
Q 48.734375 37.984375 48.734375 31.890625 
L 48.734375 0 
L 39.9375 0 
L 39.9375 31.546875 
Q 39.9375 36.921875 38.90625 39.578125 
Q 37.890625 42.234375 35.28125 43.8125 
Q 32.671875 45.40625 29.15625 45.40625 
Q 23.53125 45.40625 19.453125 41.84375 
Q 15.375 38.28125 15.375 28.328125 
L 15.375 0 
z
" id="ArialMT-6e"&gt;&lt;/path&gt;
&lt;path d="M 40.4375 19 
L 49.078125 17.875 
Q 47.65625 8.9375 41.8125 3.875 
Q 35.984375 -1.171875 27.484375 -1.171875 
Q 16.84375 -1.171875 10.375 5.78125 
Q 3.90625 12.75 3.90625 25.734375 
Q 3.90625 34.125 6.6875 40.421875 
Q 9.46875 46.734375 15.15625 49.875 
Q 20.84375 53.03125 27.546875 53.03125 
Q 35.984375 53.03125 41.359375 48.75 
Q 46.734375 44.484375 48.25 36.625 
L 39.703125 35.296875 
Q 38.484375 40.53125 35.375 43.15625 
Q 32.28125 45.796875 27.875 45.796875 
Q 21.234375 45.796875 17.078125 41.03125 
Q 12.9375 36.28125 12.9375 25.984375 
Q 12.9375 15.53125 16.9375 10.796875 
Q 20.953125 6.0625 27.390625 6.0625 
Q 32.5625 6.0625 36.03125 9.234375 
Q 39.5 12.40625 40.4375 19 
z
" id="ArialMT-63"&gt;&lt;/path&gt;
&lt;path d="M 6.59375 -19.875 
L 6.59375 51.859375 
L 14.59375 51.859375 
L 14.59375 45.125 
Q 17.4375 49.078125 21 51.046875 
Q 24.5625 53.03125 29.640625 53.03125 
Q 36.28125 53.03125 41.359375 49.609375 
Q 46.4375 46.1875 49.015625 39.953125 
Q 51.609375 33.734375 51.609375 26.3125 
Q 51.609375 18.359375 48.75 11.984375 
Q 45.90625 5.609375 40.453125 2.21875 
Q 35.015625 -1.171875 29 -1.171875 
Q 24.609375 -1.171875 21.109375 0.6875 
Q 17.625 2.546875 15.375 5.375 
L 15.375 -19.875 
z
M 14.546875 25.640625 
Q 14.546875 15.625 18.59375 10.84375 
Q 22.65625 6.0625 28.421875 6.0625 
Q 34.28125 6.0625 38.453125 11.015625 
Q 42.625 15.96875 42.625 26.375 
Q 42.625 36.28125 38.546875 41.203125 
Q 34.46875 46.140625 28.8125 46.140625 
Q 23.1875 46.140625 18.859375 40.890625 
Q 14.546875 35.640625 14.546875 25.640625 
z
" id="ArialMT-70"&gt;&lt;/path&gt;
&lt;path d="M 25.78125 7.859375 
L 27.046875 0.09375 
Q 23.34375 -0.6875 20.40625 -0.6875 
Q 15.625 -0.6875 12.984375 0.828125 
Q 10.359375 2.34375 9.28125 4.8125 
Q 8.203125 7.28125 8.203125 15.1875 
L 8.203125 45.015625 
L 1.765625 45.015625 
L 1.765625 51.859375 
L 8.203125 51.859375 
L 8.203125 64.703125 
L 16.9375 69.96875 
L 16.9375 51.859375 
L 25.78125 51.859375 
L 25.78125 45.015625 
L 16.9375 45.015625 
L 16.9375 14.703125 
Q 16.9375 10.9375 17.40625 9.859375 
Q 17.875 8.796875 18.921875 8.15625 
Q 19.96875 7.515625 21.921875 7.515625 
Q 23.390625 7.515625 25.78125 7.859375 
z
" id="ArialMT-74"&gt;&lt;/path&gt;
&lt;path d="M 4.984375 -4.296875 
L 13.53125 -5.5625 
Q 14.0625 -9.515625 16.5 -11.328125 
Q 19.78125 -13.765625 25.4375 -13.765625 
Q 31.546875 -13.765625 34.859375 -11.328125 
Q 38.1875 -8.890625 39.359375 -4.5 
Q 40.046875 -1.8125 39.984375 6.78125 
Q 34.234375 0 25.640625 0 
Q 14.9375 0 9.078125 7.71875 
Q 3.21875 15.4375 3.21875 26.21875 
Q 3.21875 33.640625 5.90625 39.90625 
Q 8.59375 46.1875 13.6875 49.609375 
Q 18.796875 53.03125 25.6875 53.03125 
Q 34.859375 53.03125 40.828125 45.609375 
L 40.828125 51.859375 
L 48.921875 51.859375 
L 48.921875 7.03125 
Q 48.921875 -5.078125 46.453125 -10.125 
Q 44 -15.1875 38.640625 -18.109375 
Q 33.296875 -21.046875 25.484375 -21.046875 
Q 16.21875 -21.046875 10.5 -16.875 
Q 4.78125 -12.703125 4.984375 -4.296875 
z
M 12.25 26.859375 
Q 12.25 16.65625 16.296875 11.96875 
Q 20.359375 7.28125 26.46875 7.28125 
Q 32.515625 7.28125 36.609375 11.9375 
Q 40.71875 16.609375 40.71875 26.5625 
Q 40.71875 36.078125 36.5 40.90625 
Q 32.28125 45.75 26.3125 45.75 
Q 20.453125 45.75 16.34375 40.984375 
Q 12.25 36.234375 12.25 26.859375 
z
" id="ArialMT-67"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(134.682813 348.378823)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-4e"&gt;&lt;/use&gt;
&lt;use x="72.216797" xlink:href="#ArialMT-75"&gt;&lt;/use&gt;
&lt;use x="127.832031" xlink:href="#ArialMT-6d"&gt;&lt;/use&gt;
&lt;use x="211.132812" xlink:href="#ArialMT-62"&gt;&lt;/use&gt;
&lt;use x="266.748047" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="322.363281" xlink:href="#ArialMT-72"&gt;&lt;/use&gt;
&lt;use x="355.664062" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="383.447266" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="439.0625" xlink:href="#ArialMT-66"&gt;&lt;/use&gt;
&lt;use x="466.845703" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="494.628906" xlink:href="#ArialMT-64"&gt;&lt;/use&gt;
&lt;use x="550.244141" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="605.859375" xlink:href="#ArialMT-79"&gt;&lt;/use&gt;
&lt;use x="655.859375" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="705.859375" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="733.642578" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="783.642578" xlink:href="#ArialMT-69"&gt;&lt;/use&gt;
&lt;use x="805.859375" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="861.474609" xlink:href="#ArialMT-63"&gt;&lt;/use&gt;
&lt;use x="911.474609" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="967.089844" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="994.873047" xlink:href="#ArialMT-70"&gt;&lt;/use&gt;
&lt;use x="1050.488281" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="1106.103516" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="1156.103516" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="1183.886719" xlink:href="#ArialMT-69"&gt;&lt;/use&gt;
&lt;use x="1206.103516" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="1261.71875" xlink:href="#ArialMT-67"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="matplotlib.axis_2"&gt;
&lt;g id="ytick_1"&gt;
&lt;g id="line2d_12"&gt;&lt;/g&gt;
&lt;g id="text_13"&gt;
&lt;!-- 0 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 320.197031)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-30"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_2"&gt;
&lt;g id="line2d_13"&gt;&lt;/g&gt;
&lt;g id="text_14"&gt;
&lt;!-- 1 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 292.022104)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-31"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_3"&gt;
&lt;g id="line2d_14"&gt;&lt;/g&gt;
&lt;g id="text_15"&gt;
&lt;!-- 2 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 263.847177)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-32"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_4"&gt;
&lt;g id="line2d_15"&gt;&lt;/g&gt;
&lt;g id="text_16"&gt;
&lt;!-- 3 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 235.67225)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-33"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_5"&gt;
&lt;g id="line2d_16"&gt;&lt;/g&gt;
&lt;g id="text_17"&gt;
&lt;!-- 4 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 207.497323)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-34"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_6"&gt;
&lt;g id="line2d_17"&gt;&lt;/g&gt;
&lt;g id="text_18"&gt;
&lt;!-- 5 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 179.322396)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-35"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_7"&gt;
&lt;g id="line2d_18"&gt;&lt;/g&gt;
&lt;g id="text_19"&gt;
&lt;!-- 6 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 151.147469)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-36"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_8"&gt;
&lt;g id="line2d_19"&gt;&lt;/g&gt;
&lt;g id="text_20"&gt;
&lt;!-- 7 --&gt;
&lt;g style="fill:#262626;" transform="translate(20.584375 122.972541)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-37"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_21"&gt;
&lt;!-- Number of postings --&gt;
&lt;g style="fill:#262626;" transform="translate(14.479687 251.249688)rotate(-90)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-4e"&gt;&lt;/use&gt;
&lt;use x="72.216797" xlink:href="#ArialMT-75"&gt;&lt;/use&gt;
&lt;use x="127.832031" xlink:href="#ArialMT-6d"&gt;&lt;/use&gt;
&lt;use x="211.132812" xlink:href="#ArialMT-62"&gt;&lt;/use&gt;
&lt;use x="266.748047" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="322.363281" xlink:href="#ArialMT-72"&gt;&lt;/use&gt;
&lt;use x="355.664062" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="383.447266" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="439.0625" xlink:href="#ArialMT-66"&gt;&lt;/use&gt;
&lt;use x="466.845703" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="494.628906" xlink:href="#ArialMT-70"&gt;&lt;/use&gt;
&lt;use x="550.244141" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="605.859375" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="655.859375" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="683.642578" xlink:href="#ArialMT-69"&gt;&lt;/use&gt;
&lt;use x="705.859375" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="761.474609" xlink:href="#ArialMT-67"&gt;&lt;/use&gt;
&lt;use x="817.089844" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="patch_3"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 364.901676 316.618125 
L 340.552585 316.618125 
L 340.552585 260.268271 
L 364.901676 260.268271 
z
" style="fill:#ea96a3;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_4"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 334.465313 316.618125 
L 310.116222 316.618125 
L 310.116222 175.743489 
L 334.465313 175.743489 
z
" style="fill:#dc924e;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_5"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 304.028949 316.618125 
L 279.679858 316.618125 
L 279.679858 119.393635 
L 304.028949 119.393635 
z
" style="fill:#b39d48;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_6"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 273.592585 316.618125 
L 249.243494 316.618125 
L 249.243494 288.443198 
L 273.592585 288.443198 
z
" style="fill:#8ea546;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_7"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 243.156222 316.618125 
L 218.807131 316.618125 
L 218.807131 175.743489 
L 243.156222 175.743489 
z
" style="fill:#48b067;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_8"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="z
" style="fill:#4aac98;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_9"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 182.283494 316.618125 
L 157.934403 316.618125 
L 157.934403 288.443198 
L 182.283494 288.443198 
z
" style="fill:#4dabb0;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_10"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 151.847131 316.618125 
L 127.49804 316.618125 
L 127.49804 260.268271 
L 151.847131 260.268271 
z
" style="fill:#54acd3;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_11"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="z
" style="fill:#a9aceb;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_12"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="M 90.974403 316.618125 
L 66.625313 316.618125 
L 66.625313 260.268271 
L 90.974403 260.268271 
z
" style="fill:#d795e8;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_13"&gt;
&lt;path clip-path="url(#p89ddf47d4d)" d="z
" style="fill:#e88fc9;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_14"&gt;
&lt;path d="M 33.145313 316.618125 
L 33.145313 99.178125 
" style="fill:none;stroke:#262626;stroke-linecap:square;stroke-linejoin:miter;stroke-width:1.25;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_15"&gt;
&lt;path d="M 367.945312 316.618125 
L 367.945312 99.178125 
" style="fill:none;stroke:#262626;stroke-linecap:square;stroke-linejoin:miter;stroke-width:1.25;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_16"&gt;
&lt;path d="M 33.145312 316.618125 
L 367.945312 316.618125 
" style="fill:none;stroke:#262626;stroke-linecap:square;stroke-linejoin:miter;stroke-width:1.25;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_17"&gt;
&lt;path d="M 33.145312 99.178125 
L 367.945312 99.178125 
" style="fill:none;stroke:#262626;stroke-linecap:square;stroke-linejoin:miter;stroke-width:1.25;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="text_22"&gt;
&lt;!-- Total Jobs: 25 --&gt;
&lt;defs&gt;
&lt;path d="M 25.921875 0 
L 25.921875 63.140625 
L 2.34375 63.140625 
L 2.34375 71.578125 
L 59.078125 71.578125 
L 59.078125 63.140625 
L 35.40625 63.140625 
L 35.40625 0 
z
" id="ArialMT-54"&gt;&lt;/path&gt;
&lt;path d="M 6.390625 0 
L 6.390625 71.578125 
L 15.1875 71.578125 
L 15.1875 0 
z
" id="ArialMT-6c"&gt;&lt;/path&gt;
&lt;path d="M 2.875 20.3125 
L 11.421875 21.484375 
Q 11.765625 13.28125 14.5 10.25 
Q 17.234375 7.234375 22.078125 7.234375 
Q 25.640625 7.234375 28.21875 8.859375 
Q 30.8125 10.5 31.78125 13.296875 
Q 32.765625 16.109375 32.765625 22.265625 
L 32.765625 71.578125 
L 42.234375 71.578125 
L 42.234375 22.796875 
Q 42.234375 13.8125 40.0625 8.875 
Q 37.890625 3.953125 33.171875 1.359375 
Q 28.46875 -1.21875 22.125 -1.21875 
Q 12.703125 -1.21875 7.6875 4.203125 
Q 2.6875 9.625 2.875 20.3125 
z
" id="ArialMT-4a"&gt;&lt;/path&gt;
&lt;path d="M 9.03125 41.84375 
L 9.03125 51.859375 
L 19.046875 51.859375 
L 19.046875 41.84375 
z
M 9.03125 0 
L 9.03125 10.015625 
L 19.046875 10.015625 
L 19.046875 0 
z
" id="ArialMT-3a"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(301.806687 110.684738)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#ArialMT-54"&gt;&lt;/use&gt;
&lt;use x="60.912109" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="116.527344" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="144.310547" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="199.925781" xlink:href="#ArialMT-6c"&gt;&lt;/use&gt;
&lt;use x="222.142578" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="249.925781" xlink:href="#ArialMT-4a"&gt;&lt;/use&gt;
&lt;use x="299.925781" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="355.541016" xlink:href="#ArialMT-62"&gt;&lt;/use&gt;
&lt;use x="411.15625" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="461.15625" xlink:href="#ArialMT-3a"&gt;&lt;/use&gt;
&lt;use x="488.939453" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="516.722656" xlink:href="#ArialMT-32"&gt;&lt;/use&gt;
&lt;use x="572.337891" xlink:href="#ArialMT-35"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_23"&gt;
&lt;!-- Python Developer Jobs --&gt;
&lt;defs&gt;
&lt;path d="M 7.71875 0 
L 7.71875 71.578125 
L 34.71875 71.578125 
Q 41.84375 71.578125 45.609375 70.90625 
Q 50.875 70.015625 54.4375 67.546875 
Q 58.015625 65.09375 60.1875 60.640625 
Q 62.359375 56.203125 62.359375 50.875 
Q 62.359375 41.75 56.546875 35.421875 
Q 50.734375 29.109375 35.546875 29.109375 
L 17.1875 29.109375 
L 17.1875 0 
z
M 17.1875 37.546875 
L 35.6875 37.546875 
Q 44.875 37.546875 48.734375 40.96875 
Q 52.59375 44.390625 52.59375 50.59375 
Q 52.59375 55.078125 50.3125 58.265625 
Q 48.046875 61.46875 44.34375 62.5 
Q 41.9375 63.140625 35.5 63.140625 
L 17.1875 63.140625 
z
" id="ArialMT-50"&gt;&lt;/path&gt;
&lt;path d="M 6.59375 0 
L 6.59375 71.578125 
L 15.375 71.578125 
L 15.375 45.90625 
Q 21.53125 53.03125 30.90625 53.03125 
Q 36.671875 53.03125 40.921875 50.75 
Q 45.171875 48.484375 47 44.484375 
Q 48.828125 40.484375 48.828125 32.859375 
L 48.828125 0 
L 40.046875 0 
L 40.046875 32.859375 
Q 40.046875 39.453125 37.1875 42.453125 
Q 34.328125 45.453125 29.109375 45.453125 
Q 25.203125 45.453125 21.75 43.421875 
Q 18.3125 41.40625 16.84375 37.9375 
Q 15.375 34.46875 15.375 28.375 
L 15.375 0 
z
" id="ArialMT-68"&gt;&lt;/path&gt;
&lt;path d="M 7.71875 0 
L 7.71875 71.578125 
L 32.375 71.578125 
Q 40.71875 71.578125 45.125 70.5625 
Q 51.265625 69.140625 55.609375 65.4375 
Q 61.28125 60.640625 64.078125 53.1875 
Q 66.890625 45.75 66.890625 36.1875 
Q 66.890625 28.03125 64.984375 21.734375 
Q 63.09375 15.4375 60.109375 11.296875 
Q 57.125 7.171875 53.578125 4.796875 
Q 50.046875 2.4375 45.046875 1.21875 
Q 40.046875 0 33.546875 0 
z
M 17.1875 8.453125 
L 32.46875 8.453125 
Q 39.546875 8.453125 43.578125 9.765625 
Q 47.609375 11.078125 50 13.484375 
Q 53.375 16.84375 55.25 22.53125 
Q 57.125 28.21875 57.125 36.328125 
Q 57.125 47.5625 53.4375 53.59375 
Q 49.75 59.625 44.484375 61.671875 
Q 40.671875 63.140625 32.234375 63.140625 
L 17.1875 63.140625 
z
" id="ArialMT-44"&gt;&lt;/path&gt;
&lt;path d="M 21 0 
L 1.265625 51.859375 
L 10.546875 51.859375 
L 21.6875 20.796875 
Q 23.484375 15.765625 25 10.359375 
Q 26.171875 14.453125 28.265625 20.21875 
L 39.796875 51.859375 
L 48.828125 51.859375 
L 29.203125 0 
z
" id="ArialMT-76"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(138.512813 15.789375)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#ArialMT-50"&gt;&lt;/use&gt;
&lt;use x="66.699219" xlink:href="#ArialMT-79"&gt;&lt;/use&gt;
&lt;use x="116.699219" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="144.482422" xlink:href="#ArialMT-68"&gt;&lt;/use&gt;
&lt;use x="200.097656" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="255.712891" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="311.328125" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="339.111328" xlink:href="#ArialMT-44"&gt;&lt;/use&gt;
&lt;use x="411.328125" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="466.943359" xlink:href="#ArialMT-76"&gt;&lt;/use&gt;
&lt;use x="516.943359" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="572.558594" xlink:href="#ArialMT-6c"&gt;&lt;/use&gt;
&lt;use x="594.775391" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="650.390625" xlink:href="#ArialMT-70"&gt;&lt;/use&gt;
&lt;use x="706.005859" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="761.621094" xlink:href="#ArialMT-72"&gt;&lt;/use&gt;
&lt;use x="794.921875" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="822.705078" xlink:href="#ArialMT-4a"&gt;&lt;/use&gt;
&lt;use x="872.705078" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="928.320312" xlink:href="#ArialMT-62"&gt;&lt;/use&gt;
&lt;use x="983.935547" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;!-- ( -senior -sr. -amazon ) --&gt;
&lt;defs&gt;
&lt;path d="M 23.390625 -21.046875 
Q 16.109375 -11.859375 11.078125 0.4375 
Q 6.0625 12.75 6.0625 25.921875 
Q 6.0625 37.546875 9.8125 48.1875 
Q 14.203125 60.546875 23.390625 72.796875 
L 29.6875 72.796875 
Q 23.78125 62.640625 21.875 58.296875 
Q 18.890625 51.5625 17.1875 44.234375 
Q 15.09375 35.109375 15.09375 25.875 
Q 15.09375 2.390625 29.6875 -21.046875 
z
" id="ArialMT-28"&gt;&lt;/path&gt;
&lt;path d="M 3.171875 21.484375 
L 3.171875 30.328125 
L 30.171875 30.328125 
L 30.171875 21.484375 
z
" id="ArialMT-2d"&gt;&lt;/path&gt;
&lt;path d="M 9.078125 0 
L 9.078125 10.015625 
L 19.09375 10.015625 
L 19.09375 0 
z
" id="ArialMT-2e"&gt;&lt;/path&gt;
&lt;path d="M 1.953125 0 
L 1.953125 7.125 
L 34.96875 45.015625 
Q 29.34375 44.734375 25.046875 44.734375 
L 3.90625 44.734375 
L 3.90625 51.859375 
L 46.296875 51.859375 
L 46.296875 46.046875 
L 18.21875 13.140625 
L 12.796875 7.125 
Q 18.703125 7.5625 23.875 7.5625 
L 47.859375 7.5625 
L 47.859375 0 
z
" id="ArialMT-7a"&gt;&lt;/path&gt;
&lt;path d="M 12.359375 -21.046875 
L 6.0625 -21.046875 
Q 20.65625 2.390625 20.65625 25.875 
Q 20.65625 35.0625 18.5625 44.09375 
Q 16.890625 51.421875 13.921875 58.15625 
Q 12.015625 62.546875 6.0625 72.796875 
L 12.359375 72.796875 
Q 21.53125 60.546875 25.921875 48.1875 
Q 29.6875 37.546875 29.6875 25.921875 
Q 29.6875 12.75 24.625 0.4375 
Q 19.578125 -11.859375 12.359375 -21.046875 
z
" id="ArialMT-29"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(139.544063 28.79775)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#ArialMT-28"&gt;&lt;/use&gt;
&lt;use x="33.300781" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="61.083984" xlink:href="#ArialMT-2d"&gt;&lt;/use&gt;
&lt;use x="94.384766" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="144.384766" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="200" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="255.615234" xlink:href="#ArialMT-69"&gt;&lt;/use&gt;
&lt;use x="277.832031" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="333.447266" xlink:href="#ArialMT-72"&gt;&lt;/use&gt;
&lt;use x="366.748047" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="394.53125" xlink:href="#ArialMT-2d"&gt;&lt;/use&gt;
&lt;use x="427.832031" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="477.832031" xlink:href="#ArialMT-72"&gt;&lt;/use&gt;
&lt;use x="511.054688" xlink:href="#ArialMT-2e"&gt;&lt;/use&gt;
&lt;use x="538.837891" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="566.621094" xlink:href="#ArialMT-2d"&gt;&lt;/use&gt;
&lt;use x="599.921875" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="655.537109" xlink:href="#ArialMT-6d"&gt;&lt;/use&gt;
&lt;use x="738.837891" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="794.453125" xlink:href="#ArialMT-7a"&gt;&lt;/use&gt;
&lt;use x="844.453125" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="900.068359" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="955.683594" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="983.466797" xlink:href="#ArialMT-29"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;!-- --&gt;
&lt;g style="fill:#262626;" transform="translate(200.545313 41.630625)scale(0.12 -0.12)"&gt;&lt;/g&gt;
&lt;!--   City: Seattle     --&gt;
&lt;defs&gt;
&lt;path d="M 58.796875 25.09375 
L 68.265625 22.703125 
Q 65.28125 11.03125 57.546875 4.90625 
Q 49.8125 -1.21875 38.625 -1.21875 
Q 27.046875 -1.21875 19.796875 3.484375 
Q 12.546875 8.203125 8.765625 17.140625 
Q 4.984375 26.078125 4.984375 36.328125 
Q 4.984375 47.515625 9.25 55.828125 
Q 13.53125 64.15625 21.40625 68.46875 
Q 29.296875 72.796875 38.765625 72.796875 
Q 49.515625 72.796875 56.828125 67.328125 
Q 64.15625 61.859375 67.046875 51.953125 
L 57.71875 49.75 
Q 55.21875 57.5625 50.484375 61.125 
Q 45.75 64.703125 38.578125 64.703125 
Q 30.328125 64.703125 24.78125 60.734375 
Q 19.234375 56.78125 16.984375 50.109375 
Q 14.75 43.453125 14.75 36.375 
Q 14.75 27.25 17.40625 20.4375 
Q 20.0625 13.625 25.671875 10.25 
Q 31.296875 6.890625 37.84375 6.890625 
Q 45.796875 6.890625 51.3125 11.46875 
Q 56.84375 16.0625 58.796875 25.09375 
z
" id="ArialMT-43"&gt;&lt;/path&gt;
&lt;path d="M 4.5 23 
L 13.421875 23.78125 
Q 14.0625 18.40625 16.375 14.96875 
Q 18.703125 11.53125 23.578125 9.40625 
Q 28.46875 7.28125 34.578125 7.28125 
Q 39.984375 7.28125 44.140625 8.890625 
Q 48.296875 10.5 50.3125 13.296875 
Q 52.34375 16.109375 52.34375 19.4375 
Q 52.34375 22.796875 50.390625 25.3125 
Q 48.4375 27.828125 43.953125 29.546875 
Q 41.0625 30.671875 31.203125 33.03125 
Q 21.34375 35.40625 17.390625 37.5 
Q 12.25 40.1875 9.734375 44.15625 
Q 7.234375 48.140625 7.234375 53.078125 
Q 7.234375 58.5 10.296875 63.203125 
Q 13.375 67.921875 19.28125 70.359375 
Q 25.203125 72.796875 32.421875 72.796875 
Q 40.375 72.796875 46.453125 70.234375 
Q 52.546875 67.671875 55.8125 62.6875 
Q 59.078125 57.71875 59.328125 51.421875 
L 50.25 50.734375 
Q 49.515625 57.515625 45.28125 60.984375 
Q 41.0625 64.453125 32.8125 64.453125 
Q 24.21875 64.453125 20.28125 61.296875 
Q 16.359375 58.15625 16.359375 53.71875 
Q 16.359375 49.859375 19.140625 47.359375 
Q 21.875 44.875 33.421875 42.265625 
Q 44.96875 39.65625 49.265625 37.703125 
Q 55.515625 34.8125 58.484375 30.390625 
Q 61.46875 25.984375 61.46875 20.21875 
Q 61.46875 14.5 58.203125 9.4375 
Q 54.9375 4.390625 48.796875 1.578125 
Q 42.671875 -1.21875 35.015625 -1.21875 
Q 25.296875 -1.21875 18.71875 1.609375 
Q 12.15625 4.4375 8.421875 10.125 
Q 4.6875 15.828125 4.5 23 
z
" id="ArialMT-53"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(158.198438 54.498375)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="27.783203" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="55.566406" xlink:href="#ArialMT-43"&gt;&lt;/use&gt;
&lt;use x="127.783203" xlink:href="#ArialMT-69"&gt;&lt;/use&gt;
&lt;use x="150" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="177.783203" xlink:href="#ArialMT-79"&gt;&lt;/use&gt;
&lt;use x="227.783203" xlink:href="#ArialMT-3a"&gt;&lt;/use&gt;
&lt;use x="255.566406" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="283.349609" xlink:href="#ArialMT-53"&gt;&lt;/use&gt;
&lt;use x="350.048828" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="405.664062" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="461.279297" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="489.0625" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="516.845703" xlink:href="#ArialMT-6c"&gt;&lt;/use&gt;
&lt;use x="539.0625" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="594.677734" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="622.460938" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="650.244141" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="678.027344" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;!-- Region: Seattle, WA --&gt;
&lt;defs&gt;
&lt;path d="M 7.859375 0 
L 7.859375 71.578125 
L 39.59375 71.578125 
Q 49.171875 71.578125 54.140625 69.640625 
Q 59.125 67.71875 62.109375 62.828125 
Q 65.09375 57.953125 65.09375 52.046875 
Q 65.09375 44.4375 60.15625 39.203125 
Q 55.21875 33.984375 44.921875 32.5625 
Q 48.6875 30.765625 50.640625 29 
Q 54.78125 25.203125 58.5 19.484375 
L 70.953125 0 
L 59.03125 0 
L 49.5625 14.890625 
Q 45.40625 21.34375 42.71875 24.75 
Q 40.046875 28.171875 37.921875 29.53125 
Q 35.796875 30.90625 33.59375 31.453125 
Q 31.984375 31.78125 28.328125 31.78125 
L 17.328125 31.78125 
L 17.328125 0 
z
M 17.328125 39.984375 
L 37.703125 39.984375 
Q 44.1875 39.984375 47.84375 41.328125 
Q 51.515625 42.671875 53.421875 45.625 
Q 55.328125 48.578125 55.328125 52.046875 
Q 55.328125 57.125 51.640625 60.390625 
Q 47.953125 63.671875 39.984375 63.671875 
L 17.328125 63.671875 
z
" id="ArialMT-52"&gt;&lt;/path&gt;
&lt;path d="M 8.890625 0 
L 8.890625 10.015625 
L 18.890625 10.015625 
L 18.890625 0 
Q 18.890625 -5.515625 16.9375 -8.90625 
Q 14.984375 -12.3125 10.75 -14.15625 
L 8.296875 -10.40625 
Q 11.078125 -9.1875 12.390625 -6.8125 
Q 13.71875 -4.4375 13.875 0 
z
" id="ArialMT-2c"&gt;&lt;/path&gt;
&lt;path d="M 20.21875 0 
L 1.21875 71.578125 
L 10.9375 71.578125 
L 21.828125 24.65625 
Q 23.578125 17.28125 24.859375 10.015625 
Q 27.59375 21.484375 28.078125 23.25 
L 41.703125 71.578125 
L 53.125 71.578125 
L 63.375 35.359375 
Q 67.234375 21.875 68.953125 10.015625 
Q 70.3125 16.796875 72.515625 25.59375 
L 83.734375 71.578125 
L 93.265625 71.578125 
L 73.640625 0 
L 64.5 0 
L 49.421875 54.546875 
Q 47.515625 61.375 47.171875 62.9375 
Q 46.046875 58.015625 45.0625 54.546875 
L 29.890625 0 
z
" id="ArialMT-57"&gt;&lt;/path&gt;
&lt;path d="M -0.140625 0 
L 27.34375 71.578125 
L 37.546875 71.578125 
L 66.84375 0 
L 56.0625 0 
L 47.703125 21.6875 
L 17.78125 21.6875 
L 9.90625 0 
z
M 20.515625 29.390625 
L 44.78125 29.390625 
L 37.3125 49.21875 
Q 33.890625 58.25 32.234375 64.0625 
Q 30.859375 57.171875 28.375 50.390625 
z
" id="ArialMT-41"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(146.52375 67.50675)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#ArialMT-52"&gt;&lt;/use&gt;
&lt;use x="72.216797" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="127.832031" xlink:href="#ArialMT-67"&gt;&lt;/use&gt;
&lt;use x="183.447266" xlink:href="#ArialMT-69"&gt;&lt;/use&gt;
&lt;use x="205.664062" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="261.279297" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="316.894531" xlink:href="#ArialMT-3a"&gt;&lt;/use&gt;
&lt;use x="344.677734" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="372.460938" xlink:href="#ArialMT-53"&gt;&lt;/use&gt;
&lt;use x="439.160156" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="494.775391" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="550.390625" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="578.173828" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="605.957031" xlink:href="#ArialMT-6c"&gt;&lt;/use&gt;
&lt;use x="628.173828" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="683.789062" xlink:href="#ArialMT-2c"&gt;&lt;/use&gt;
&lt;use x="711.572266" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="739.355469" xlink:href="#ArialMT-57"&gt;&lt;/use&gt;
&lt;use x="833.693359" xlink:href="#ArialMT-41"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;!-- --&gt;
&lt;g style="fill:#262626;" transform="translate(200.545313 80.339625)scale(0.12 -0.12)"&gt;&lt;/g&gt;
&lt;!-- Frequency of Posts - Dec 26 to Jan 05 --&gt;
&lt;defs&gt;
&lt;path d="M 8.203125 0 
L 8.203125 71.578125 
L 56.5 71.578125 
L 56.5 63.140625 
L 17.671875 63.140625 
L 17.671875 40.96875 
L 51.265625 40.96875 
L 51.265625 32.515625 
L 17.671875 32.515625 
L 17.671875 0 
z
" id="ArialMT-46"&gt;&lt;/path&gt;
&lt;path d="M 39.65625 -19.875 
L 39.65625 5.515625 
Q 37.59375 2.640625 33.90625 0.734375 
Q 30.21875 -1.171875 26.078125 -1.171875 
Q 16.84375 -1.171875 10.171875 6.203125 
Q 3.515625 13.578125 3.515625 26.421875 
Q 3.515625 34.234375 6.21875 40.421875 
Q 8.9375 46.625 14.078125 49.828125 
Q 19.234375 53.03125 25.390625 53.03125 
Q 35.015625 53.03125 40.53125 44.921875 
L 40.53125 51.859375 
L 48.4375 51.859375 
L 48.4375 -19.875 
z
M 12.546875 26.078125 
Q 12.546875 16.0625 16.75 11.0625 
Q 20.953125 6.0625 26.8125 6.0625 
Q 32.421875 6.0625 36.46875 10.8125 
Q 40.53125 15.578125 40.53125 25.296875 
Q 40.53125 35.640625 36.25 40.859375 
Q 31.984375 46.09375 26.21875 46.09375 
Q 20.515625 46.09375 16.53125 41.234375 
Q 12.546875 36.375 12.546875 26.078125 
z
" id="ArialMT-71"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g style="fill:#262626;" transform="translate(98.165625 93.207375)scale(0.12 -0.12)"&gt;
&lt;use xlink:href="#ArialMT-46"&gt;&lt;/use&gt;
&lt;use x="61.083984" xlink:href="#ArialMT-72"&gt;&lt;/use&gt;
&lt;use x="94.384766" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="150" xlink:href="#ArialMT-71"&gt;&lt;/use&gt;
&lt;use x="205.615234" xlink:href="#ArialMT-75"&gt;&lt;/use&gt;
&lt;use x="261.230469" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="316.845703" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="372.460938" xlink:href="#ArialMT-63"&gt;&lt;/use&gt;
&lt;use x="422.460938" xlink:href="#ArialMT-79"&gt;&lt;/use&gt;
&lt;use x="472.460938" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="500.244141" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="555.859375" xlink:href="#ArialMT-66"&gt;&lt;/use&gt;
&lt;use x="583.642578" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="611.425781" xlink:href="#ArialMT-50"&gt;&lt;/use&gt;
&lt;use x="678.125" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="733.740234" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="783.740234" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="811.523438" xlink:href="#ArialMT-73"&gt;&lt;/use&gt;
&lt;use x="861.523438" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="889.306641" xlink:href="#ArialMT-2d"&gt;&lt;/use&gt;
&lt;use x="922.607422" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="950.390625" xlink:href="#ArialMT-44"&gt;&lt;/use&gt;
&lt;use x="1022.607422" xlink:href="#ArialMT-65"&gt;&lt;/use&gt;
&lt;use x="1078.222656" xlink:href="#ArialMT-63"&gt;&lt;/use&gt;
&lt;use x="1128.222656" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="1156.005859" xlink:href="#ArialMT-32"&gt;&lt;/use&gt;
&lt;use x="1211.621094" xlink:href="#ArialMT-36"&gt;&lt;/use&gt;
&lt;use x="1267.236328" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="1295.019531" xlink:href="#ArialMT-74"&gt;&lt;/use&gt;
&lt;use x="1322.802734" xlink:href="#ArialMT-6f"&gt;&lt;/use&gt;
&lt;use x="1378.417969" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="1406.201172" xlink:href="#ArialMT-4a"&gt;&lt;/use&gt;
&lt;use x="1456.201172" xlink:href="#ArialMT-61"&gt;&lt;/use&gt;
&lt;use x="1511.816406" xlink:href="#ArialMT-6e"&gt;&lt;/use&gt;
&lt;use x="1567.431641" xlink:href="#ArialMT-20"&gt;&lt;/use&gt;
&lt;use x="1595.214844" xlink:href="#ArialMT-30"&gt;&lt;/use&gt;
&lt;use x="1650.830078" xlink:href="#ArialMT-35"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;defs&gt;
&lt;clippath id="p89ddf47d4d"&gt;
&lt;rect height="217.44" width="334.8" x="33.145313" y="99.178125"&gt;&lt;/rect&gt;
&lt;/clippath&gt;
&lt;/defs&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[19]:&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
&lt;thead&gt;
&lt;tr style="text-align: right;"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;days_posted&lt;/th&gt;
&lt;th&gt;job_title&lt;/th&gt;
&lt;th&gt;job_location&lt;/th&gt;
&lt;th&gt;comp_name&lt;/th&gt;
&lt;th&gt;job_link&lt;/th&gt;
&lt;th&gt;job_desc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Business Intelligence Engineer, GTM&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;Groupon&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=23d00f06052c77fa&amp;fccid=863ad2cc91c92c82&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Machine Learning Scientist&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;demisourced&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/company/demisourced/jobs/Machine-Learning-Scientist-60c4a50db36bf48a?fccid=eda7935b076e594d&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Software Engineer- Platform&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;Xinova&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=39224f12f17f81e5&amp;fccid=00d972a756ff9194&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Software Engineer&lt;/td&gt;
&lt;td&gt;Seattle, WA 98103 (Green Lake - Wallingford area)&lt;/td&gt;
&lt;td&gt;Axon&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=0489a19452589cce&amp;fccid=72b6c36250909407&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Backend Software Engineer (Java)&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;TalentReach&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/company/TalentReach/jobs/Backend-Software-Engineer-be562d26753682c7?fccid=fbe153e6bd193174&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Lead Information Management Engineer - Java, AWS, Hadoop&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;DISNEY&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=75aa8c0e6bde45da&amp;fccid=4ed80f3a97849f22&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Systems Software Engineer - Oracle Cloud Infrastructure&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;Oracle&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=f2e8e226560a2844&amp;fccid=cd22d01053af7669&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;17&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Software Engineer - Push Marketing&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;Groupon&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=3f64b358b62c566d&amp;fccid=863ad2cc91c92c82&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;18&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Performance and Capacity Engineer&lt;/td&gt;
&lt;td&gt;Seattle, WA&lt;/td&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;http://www.indeed.com/rc/clk?jk=097cab916a95eec2&amp;fccid=1639254ea84748b5&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[30]:&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
&lt;thead&gt;
&lt;tr style="text-align: right;"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;comp_name&lt;/th&gt;
&lt;th&gt;job_desc&lt;/th&gt;
&lt;th&gt;days_posted&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;Sabey Corporation&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;Tableau&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;Indeed&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;td&gt;Zillow&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;td&gt;Oracle&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;td&gt;Epic Games&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;td&gt;eShares, Inc.&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;td&gt;Tableau&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;17&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;18&lt;/th&gt;
&lt;td&gt;Yubico&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;19&lt;/th&gt;
&lt;td&gt;Booz Allen Hamilton&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;td&gt;Booz Allen Hamilton&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;21&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;22&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;23&lt;/th&gt;
&lt;td&gt;Institute for Systems Biology&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;24&lt;/th&gt;
&lt;td&gt;Narrative Science&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;25&lt;/th&gt;
&lt;td&gt;ViaSat&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;26&lt;/th&gt;
&lt;td&gt;Indeed&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;27&lt;/th&gt;
&lt;td&gt;Indeed&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;28&lt;/th&gt;
&lt;td&gt;General UI&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;29&lt;/th&gt;
&lt;td&gt;Expeditors&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;...&lt;/th&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;225&lt;/th&gt;
&lt;td&gt;Fluke&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;226&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;227&lt;/th&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;228&lt;/th&gt;
&lt;td&gt;Allen Institute&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;229&lt;/th&gt;
&lt;td&gt;Donnelley Financial Solutions&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;230&lt;/th&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;231&lt;/th&gt;
&lt;td&gt;Palantir Technologies&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;232&lt;/th&gt;
&lt;td&gt;Time Inc.&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;233&lt;/th&gt;
&lt;td&gt;Tune&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;234&lt;/th&gt;
&lt;td&gt;Zillow&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;235&lt;/th&gt;
&lt;td&gt;Glowforge&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;236&lt;/th&gt;
&lt;td&gt;Nutanix&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;237&lt;/th&gt;
&lt;td&gt;Blue Origin, LLC&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;238&lt;/th&gt;
&lt;td&gt;DB Best Technologies&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;239&lt;/th&gt;
&lt;td&gt;Groupon&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;240&lt;/th&gt;
&lt;td&gt;Wargaming.net&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;241&lt;/th&gt;
&lt;td&gt;Wargaming.net&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;242&lt;/th&gt;
&lt;td&gt;Wargaming.net&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;243&lt;/th&gt;
&lt;td&gt;Panopto&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;244&lt;/th&gt;
&lt;td&gt;Wargaming.net&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;245&lt;/th&gt;
&lt;td&gt;Kinetica DB&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;246&lt;/th&gt;
&lt;td&gt;Mellanox Technologies&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;247&lt;/th&gt;
&lt;td&gt;Palantir Technologies&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;248&lt;/th&gt;
&lt;td&gt;Indeed&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;249&lt;/th&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;265&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;268&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;269&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;270&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;289&lt;/th&gt;
&lt;td&gt;Groupon&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;253 rows × 3 columns&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ignore &lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jobsc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'comp_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'job_desc'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[16]:&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
&lt;thead&gt;
&lt;tr style="text-align: right;"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;comp_name&lt;/th&gt;
&lt;th&gt;job_desc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;td&gt;Oracle&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;td&gt;Epic Games&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;td&gt;eShares, Inc.&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;td&gt;Tableau&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;17&lt;/th&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;18&lt;/th&gt;
&lt;td&gt;Yubico&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [31]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ignore &lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobsc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"save.p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Finished'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Finished
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [32]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ignore &lt;/span&gt;

&lt;span class="n"&gt;jobsc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_pickle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"job_scrape.p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ignore &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;

&lt;span class="c1"&gt;#works&lt;/span&gt;
&lt;span class="n"&gt;url1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://www.indeed.com/rc/clk?jk=baa0df17576e3c3a&amp;fccid=734cb5a01ee60f80'&lt;/span&gt;
&lt;span class="c1"&gt;#testing&lt;/span&gt;
&lt;span class="n"&gt;url2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://us-amazon.icims.com/jobs/492828/data-scientist---tableau-specialist/job?iis=Job+Posting&amp;iisn=Indeed+&lt;/span&gt;&lt;span class="si"&gt;%28F&lt;/span&gt;&lt;span class="s1"&gt;ree+Posting%29&amp;mobile=false&amp;width=1165&amp;height=1200&amp;bga=true&amp;needsRedirect=false&amp;jan1offset=-480&amp;jun1offset=-420'&lt;/span&gt;
&lt;span class="c1"&gt;#testing&lt;/span&gt;
&lt;span class="n"&gt;url3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://jobs.jobvite.com/careers/avalara/job/os9h5fwH?__jvst=Job%20Board&amp;__jvsd=Indeed'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JobDescScraper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_window_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scrape_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        &lt;span class="c1"&gt;# select tags based on base url&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"icims.com"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'on the right track'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;soup_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;soup_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'li'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            
        &lt;span class="c1"&gt;# join the array elements (i.e. the array of tags and their contents) &lt;/span&gt;
        &lt;span class="n"&gt;job_desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup_filter&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;&gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    
        &lt;span class="c1"&gt;# Cut junk after add based on base url&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'https://tableau'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;job_desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job_desc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tableau Software is a company on a mission'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        
        &lt;span class="c1"&gt;# removes any whitespace between two new lines&lt;/span&gt;
        &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'\n\s*\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'\n\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job_desc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;job_desc&lt;/span&gt;
    
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scrape_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;scraper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JobDescScraper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    
    
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;
Account central


Apply history


Help center


Job alerts


Job watch list


Recommended jobs


Resumes


Working at Microsoft 


Benefits and perks


Businesses and teams


Mission and culture


Office locations





Benefits and perks



Businesses and teams



Mission and culture



Office locations



Students and graduates 


Apply


Events and webinars


Find your recruiter


International opportunities


Programs





Apply



Events and webinars



Find your recruiter



International opportunities



Programs



Find a job 


Students and graduates


Industry professionals





Students and graduates



Industry professionals



Things to do 


Create a careers account


Explore recommended jobs


Locate events and webinars


Find your recruiter


Review interview tips





Create a careers account



Explore recommended jobs



Locate events and webinars



Find your recruiter



Review interview tips


Working at LinkedIn

Have you ever imagined the world with an infinite amount of storage available and accessible to everyone? A place where everyone in the world can easily access their books/music/photos/video/any data from anywhere at any time via any means (e.g. mobile phones, tablets, PCs, smart devices, etc). Did you ever desire a universally accessible storage system to record all the knowledge known to mankind, to keep all the books/music/videos ever created, or to store all the data collected from all the scientists in the world for them to collaborate upon? Do you want to be part of a team that strives to bring these to reality?

If so, the Microsoft Azure Storage team is what you are looking for. We are building Microsoft’s cloud storage solution - Microsoft Azure Storage, which is a massively scalable, highly distributed, ubiquitously accessible storage system, designed to scale out and serve the entire world. We continue to have tremendous hockey stick growth, we have many Exabyte’s of data stored, and are designing and building systems for Zettabyte scale to support demand growth for the coming years.

We are looking for engineers who are passionate about distributed storage and want to work on a fast-paced team with talented engineers. To be successful in this area you must thrive while solving challenges related to durability, availability, and concurrency while serving millions of requests per second. You will have an opportunity to make high impact changes on a daily basis as you build a hyperscale storage system that may indirectly or directly be used daily by your friends and family.

Qualifications:

• A passion for large scale storage.

• Experience with multi-threaded/parallel programming.

• Excellence in software engineering practices, coding and solid foundation in data structures, algorithms with strong testing, debugging and analytical skills.

• Proven ability to plan, schedule and deliver quality software.

Requirements for the position are:

• 2 years of professional software development experience building scalable, distributed services with C#, C++, or Java.

• BS/MS/PhD in Computer Science, Computer Engineering, or Electrical Engineering.

Ability to meet Microsoft, customer and/or government security screening requirements are required for this role. These requirements include, but are not limited to the following specialized security screenings:

Microsoft Cloud Background Check: This position will be required to pass the Microsoft Cloud background check upon hire/transfer and every two years thereafter.

Microsoft is an equal opportunity employer. All qualified applicants will receive consideration for employment without regard to age, ancestry, color, family or medical care leave, gender identity or expression, genetic information, marital status, medical condition, national origin, physical or mental disability, political affiliation, protected veteran status, race, religion, sex (including pregnancy), sexual orientation, or any other characteristic protected by applicable laws, regulations and ordinances. If you need assistance and/or a reasonable accommodation due to a disability during the application or the recruiting process, please send a request to askstaff@microsoft.com.

MSFT:AzureStorage


            Update contact information?


            Great! Updates to your account have been saved.


Explore recommended jobs



Search jobs



Manage job alerts



Manage resumes



Diversity



JobsBlog



News Center



Stories



The Fire Hose



Women at Microsoft



Apply history



Frequently asked questions



Help center



Interview tips



Job watch list
































Legal

Privacy

Contact us

©2017 Microsoft


            The selected job(s) were added to your job watch list
        
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ignore &lt;/span&gt;
        &lt;span class="c1"&gt;#soup_trim = soup_filter.get_text()&lt;/span&gt;

        &lt;span class="c1"&gt;#job_desc = '\n'.join([s for s in soup_ptrim])&lt;/span&gt;

        &lt;span class="c1"&gt;# Search for different tags on different sites&lt;/span&gt;
        &lt;span class="c1"&gt;#if "icims.com" in link:&lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_filter = soup.findAll('div', { 'class' : 'iCIMS_InfoMsg'})&lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_trim = soup_filter&lt;/span&gt;
        &lt;span class="c1"&gt;#else:&lt;/span&gt;
        &lt;span class="c1"&gt;#    prohibitedWords = ['&lt;p&gt;','&lt;/p&gt;','&lt;ul&gt;','&lt;/ul&gt;','&lt;li&gt;','&lt;/li&gt;']&lt;/span&gt;
        &lt;span class="c1"&gt;#    big_regex = re.compile('|'.join(map(re.escape, prohibitedWords)))&lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_found = soup.findAll(['p','ul'])&lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_trim = big_regex.sub("&lt;replaced&gt;", 'this message contains Some really Random Words')&lt;/span&gt;
        &lt;span class="c1"&gt;#    &lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_filter = soup.findAll(['p','ul'])&lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_trim = [str(s).replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '').replace('&lt;ul&gt;', '').replace('&lt;/ul&gt;', '').replace('&lt;il&gt;', '').replace('&lt;/il&gt;', '') for s in soup_filter]&lt;/span&gt;
        &lt;span class="c1"&gt;#    &lt;/span&gt;
        &lt;span class="c1"&gt;#    soup_trim = []&lt;/span&gt;
        &lt;span class="c1"&gt;#    for s in soup_filter&lt;/span&gt;
        &lt;span class="c1"&gt;#        soup_trim.append()&lt;/span&gt;
        &lt;span class="c1"&gt;#job_desc = '\n'.join([s for s in soup_ptrim])&lt;/span&gt;
        
        
        &lt;span class="c1"&gt;#the_message = big_regex.sub("&lt;replaced&gt;", 'this message contains Some really Random Words')&lt;/span&gt;
        &lt;span class="c1"&gt;#the_message&lt;/span&gt;
        &lt;span class="c1"&gt;#'this message contains &lt;replaced&gt; really &lt;replaced&gt; &lt;replaced&gt;'&lt;/span&gt;
        &lt;span class="c1"&gt;#soup_ptrim = [str(s).replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '').replace('&lt;span&gt;', '').replace('&lt;/span&gt;', '') for s in soup_p if 'id=' not in str(s) and 'class=' not in str(s) and 'href=' not in str(s) and '&lt;b&gt;' not in str(s) and 'consideration for employment without regard to' not in str(s) and 'lease try again' not in str(s)]&lt;/span&gt;
                
        &lt;span class="c1"&gt;#soup_ptrim = [str(s).replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '')&lt;/span&gt;
        &lt;span class="c1"&gt;#.replace('&lt;span&gt;', '')&lt;/span&gt;
        &lt;span class="c1"&gt;#.replace('&lt;/span&gt;', '') &lt;/span&gt;
        &lt;span class="c1"&gt;#for s in soup_p if 'id=' &lt;/span&gt;
        &lt;span class="c1"&gt;#not in str(s) and 'class=' &lt;/span&gt;
        &lt;span class="c1"&gt;#not in str(s) and 'href=' &lt;/span&gt;
        &lt;span class="c1"&gt;#not in str(s) and '&lt;b&gt;' &lt;/span&gt;
        &lt;span class="c1"&gt;#not in str(s) and 'consideration for employment without regard to' &lt;/span&gt;
        &lt;span class="c1"&gt;#not in str(s) and 'lease try again' not in str(s)]&lt;/span&gt;


        
        &lt;span class="c1"&gt;#print(selection)&lt;/span&gt;
        
        &lt;span class="c1"&gt;#for EachPart in selection:&lt;/span&gt;
         &lt;span class="c1"&gt;#   print(EachPart.get_text())&lt;/span&gt;
    
        &lt;span class="c1"&gt;#regex = re.compile('.*job.*')&lt;/span&gt;
        &lt;span class="c1"&gt;#print(regex)&lt;/span&gt;
        &lt;span class="c1"&gt;#soup = Soup(self.driver.page_source)&lt;/span&gt;
        &lt;span class="c1"&gt;#extract = soup.find_all(attrs={"class": regex})&lt;/span&gt;
    
        &lt;span class="c1"&gt;#for item in extract:&lt;/span&gt;
            &lt;span class="c1"&gt;#print(item)&lt;/span&gt;
        &lt;span class="c1"&gt;#.select('div[class*="listing-col-"]')&lt;/span&gt;
        &lt;span class="c1"&gt;#selectionfind_all('div', attrs={'data-tn-component': 'organicJob'})&lt;/span&gt;
        &lt;span class="c1"&gt;#job_desc = '\n'.join([s for s in selection])&lt;/span&gt;
        &lt;span class="c1"&gt;#for EachPart in soup.select('div[class*="listing-col-"]'):&lt;/span&gt;
        &lt;span class="c1"&gt;#print(job_desc)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['$','$'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        " linebreaks: { automatic: true, width: '95% container' }, " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;
&lt;/p&gt;</content><category term="jobs"></category><category term="search"></category><category term="jupyter"></category><category term="notebook"></category><category term="ipython"></category><category term="python"></category><category term="python3"></category></entry><entry><title>Task Organizer Django Web App</title><link href="http://www.andrewtcrooks.com/2017/09/22/taskorganizer/" rel="alternate"></link><published>2017-09-22T00:00:00-07:00</published><updated>2017-09-22T00:00:00-07:00</updated><author><name>Andrew C.</name></author><id>tag:www.andrewtcrooks.com,2017-09-22:/2017/09/22/taskorganizer/</id><summary type="html">&lt;p&gt;Example of a checklist web app in django&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Task Organizer&lt;/h1&gt;
&lt;p&gt;Simple task list written in django&lt;/p&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;!--adding {attach} like this ({attach}screenshot*.jpg) --&gt;

&lt;p&gt;&lt;img alt="Sign-in/Login" src="http://www.andrewtcrooks.com/2017/09/22/taskorganizer/screenshot1.jpg?raw=true" title="Sign-in/Login"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Task List" src="http://www.andrewtcrooks.com/2017/09/22/taskorganizer/screenshot2.jpg?raw=true" title="Task List"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Add Task" src="http://www.andrewtcrooks.com/2017/09/22/taskorganizer/screenshot3.jpg?raw=true" title="Add Task"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Edit Task" src="http://www.andrewtcrooks.com/2017/09/22/taskorganizer/screenshot4.jpg?raw=true" title="Edit Task"&gt;&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;These instructions will get a copy of the project up and running on your local machine for development and testing purposes.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Python dependancies&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python==3.6.2
Django==1.11.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additional requirements&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. A locally served PostgreSQL database. I used the Postgres.app on my Mac but 
   any postgresql server should be fine.

2. Web browser open to http://127.0.0.1:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Optional requirements (goes with PostgreSQL database reset example below)
If you use Postgres.app on Mac, add the following lines to your .bashrc or .profile to enable CLI tools for the PostgreSQL database&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# add CLI tools for PostGRESQL
export PATH=&amp;quot;/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installing&lt;/h3&gt;
&lt;p&gt;After copying the repo you will need to create two files&lt;/p&gt;
&lt;p&gt;Create local.py in settings directory (/taskorganizer/config/settings) with the following code and replace name_of_postgresql_db with the name of your PostgreSQL database&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;


&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name_of_postgresql_db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug_toolbar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug_toolbar.middleware.DebugToolbarMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create secrets.json in root directory (/taskorganizer/) with the following code and replace your_key_here with a secret key that only you will know&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;FILENAME&amp;quot;: &amp;quot;secrets.json&amp;quot;,
  &amp;quot;SECRET_KEY&amp;quot;: &amp;quot;your_key_here&amp;quot;,
  &amp;quot;DATABASES_HOST&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;PORT&amp;quot;: &amp;quot;5432&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For version control, make sure local.py and secrets.json are listed in your .gitignore file&lt;/p&gt;
&lt;p&gt;Start the app on a local server by running the following code in a terminal and view at http://127.0.0.1:8000&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/taskorganizer          # cd to wherever you put the repo locally
python manage.py runserver 8000 --settings=config.settings.local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now have a running version of the app!&lt;/p&gt;
&lt;p&gt;Try adding/editing/deleting tasks and enjoy&lt;/p&gt;
&lt;h3&gt;Resetting&lt;/h3&gt;
&lt;p&gt;Whenever you change the model you will need to first reset the database and then redo the migrations&lt;/p&gt;
&lt;p&gt;To reset the database, run the following code in a terminal and replace db_name with the name of your PostgreSQL database&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dropdb name_of_postgresql_db
create name_of_postgresql_db
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To redo the migrations, delete the 0001_initial.py file in the /tasklist/app/migrations folder and run the following code in a terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py makemigrations --settings==config.settings.local
python manage.py migrate --settings==config.settings.local
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Built With&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/"&gt;Django&lt;/a&gt; - web framework&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Authors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Andrew T. Crooks&lt;/strong&gt; - &lt;a href="https://github.com/andrewtcrooks"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="LICENSE.md"&gt;LICENSE.md&lt;/a&gt; file for details&lt;/p&gt;</content><category term="django"></category><category term="django1.11"></category><category term="python"></category><category term="python3"></category><category term="postgresql"></category></entry><entry><title>AWS Jupyter notebook server</title><link href="http://www.andrewtcrooks.com/2017/07/08/aws-ec2-jupyter-server-script/" rel="alternate"></link><published>2017-07-08T00:00:00-07:00</published><updated>2017-07-08T00:00:00-07:00</updated><author><name>Andrew C.</name></author><id>tag:www.andrewtcrooks.com,2017-07-08:/2017/07/08/aws-ec2-jupyter-server-script/</id><summary type="html">&lt;p&gt;Script for starting a Jupyter notebook server on AWS EC2.&lt;/p&gt;</summary><content type="html">&lt;p&gt;https://github.com/andrewtcrooks/AWS-Jupyter-notebook-server.git&lt;/p&gt;
&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="A-Jupyter-notebook-for-securely-logging-into-AWS-EC2:"&gt;A Jupyter notebook for securely logging into AWS EC2:&lt;a class="anchor-link" href="#A-Jupyter-notebook-for-securely-logging-into-AWS-EC2:"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Starts a Jupyter notebook server on AWS EC2&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Avoids man-in-the-middle attacks by verifying the ssh fingerprint before login&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Returns instructions with easy to copy/paste commands to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Log into server instance with ssh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start jupyter on the server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View in a browser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Terminate instance (i.e. stop paying for it!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id="Requirements"&gt;Requirements&lt;a class="anchor-link" href="#Requirements"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Place *.pem and mappings.json into same folder as this notebook before running&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/hr&gt;&lt;/hr&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%%bash

&lt;span class="c1"&gt;###----------------------NOTE---------------------###&lt;/span&gt;
&lt;span class="c1"&gt;### This cell will take ~5-10 minutes to complete ###&lt;/span&gt;
&lt;span class="c1"&gt;###  and won't print out until it has completed.  ###&lt;/span&gt;
&lt;span class="c1"&gt;###-----------------------------------------------###&lt;/span&gt;


&lt;span class="c1"&gt;### contents of aws_start_script.sh ###&lt;/span&gt;

&lt;span class="c1"&gt;# AWS Deep Learning Jupyter Notebook Server&lt;/span&gt;



&lt;span class="c1"&gt;##-------------------------------------##&lt;/span&gt;
&lt;span class="c1"&gt;## AWS EC2 Parameters (EDITS REQUIRED) ##&lt;/span&gt;
&lt;span class="c1"&gt;##-------------------------------------##&lt;/span&gt;

&lt;span class="c1"&gt;# CHANGE THE PARAMETERS BELOW TO FIT YOUR PROJECT&lt;/span&gt;
&lt;span class="nv"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"merlin"&lt;/span&gt; &lt;span class="c1"&gt;# AWS keypair file name sans the ".pem"&lt;/span&gt;
&lt;span class="nv"&gt;KEY_LOC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/Users/andrew/git/andrewtcrooks.com/content/notebooks"&lt;/span&gt;

&lt;span class="c1"&gt;# OPTIONAL CHANGE&lt;/span&gt;
&lt;span class="nv"&gt;INSTANCE_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"t2.micro"&lt;/span&gt; &lt;span class="c1"&gt;# Small instance to start with&lt;/span&gt;
                         &lt;span class="c1"&gt;# Move to bigger like c4.8xlarge when needed&lt;/span&gt;
&lt;span class="nv"&gt;IMAGEID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ami-f1e73689"&lt;/span&gt; &lt;span class="c1"&gt;# Deep Learning AMI with Conda (Ubuntu)&lt;/span&gt;
&lt;span class="nv"&gt;REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"us-west-2"&lt;/span&gt; &lt;span class="c1"&gt;# (Change if NOT in Oregon or Washington state)&lt;/span&gt;

&lt;span class="c1"&gt;# DON'T CHANGE&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"8888"&lt;/span&gt; &lt;span class="c1"&gt;#  The localhost port where remote jupyter notebook will be &lt;/span&gt;
            &lt;span class="c1"&gt;#   served.&lt;/span&gt;
            &lt;span class="c1"&gt;#  If you have a local jupyter server that is already on &lt;/span&gt;
            &lt;span class="c1"&gt;#   8888, change your local server port to something else &lt;/span&gt;
            &lt;span class="c1"&gt;#   like 8889.&lt;/span&gt;
            &lt;span class="c1"&gt;#  REASON: AWS automatically serves jupyter on port 8888 &lt;/span&gt;
            &lt;span class="c1"&gt;#   and you only want to have to type 'jupyter notebook'&lt;/span&gt;
            &lt;span class="c1"&gt;#   instead of 'jupyter notebook --port:8887' after ssh-ing &lt;/span&gt;
            &lt;span class="c1"&gt;#   into the server&lt;/span&gt;
&lt;span class="nv"&gt;COUNT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt; &lt;span class="c1"&gt;# (Don't Change) Number of instances to create&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ubuntu"&lt;/span&gt; &lt;span class="c1"&gt;# (Don't Change)the EC2 linux user name&lt;/span&gt;

&lt;span class="c1"&gt;# UD is supposed to be boot script but it doesn't seem to work. &lt;/span&gt;
&lt;span class="c1"&gt;# Left it blank and used AMI with everything preinstalled instead.&lt;/span&gt;
&lt;span class="nv"&gt;UD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="c1"&gt;#UD="--user-data file://$HOME/scripts/aws/start.txt"&lt;/span&gt;
&lt;span class="nv"&gt;BDM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"--block-device-mappings file://mappings.json"&lt;/span&gt; 



&lt;span class="c1"&gt;##------------------------##&lt;/span&gt;
&lt;span class="c1"&gt;## Start AWS EC2 Instance ##&lt;/span&gt;
&lt;span class="c1"&gt;##------------------------##&lt;/span&gt;

&lt;span class="c1"&gt;# start EC2 instance using above parameters&lt;/span&gt;
&lt;span class="c1"&gt;# and save instance id to variable INSTANCE&lt;/span&gt;
&lt;span class="nv"&gt;INSTANCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 run-instances --image-id &lt;span class="nv"&gt;$IMAGEID&lt;/span&gt; --instance-type &lt;span class="se"&gt;\&lt;/span&gt;
            &lt;span class="nv"&gt;$INSTANCE_TYPE&lt;/span&gt; --count &lt;span class="nv"&gt;$COUNT&lt;/span&gt; --key-name &lt;span class="nv"&gt;$KEY&lt;/span&gt; --region &lt;span class="se"&gt;\&lt;/span&gt;
            &lt;span class="nv"&gt;$REGION&lt;/span&gt; --query &lt;span class="s1"&gt;'Instances[0].InstanceId'&lt;/span&gt; &lt;span class="nv"&gt;$BDM&lt;/span&gt; &lt;span class="nv"&gt;$UD&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# remove quotes around INSTANCE id&lt;/span&gt;
&lt;span class="nv"&gt;INSTANCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTANCE&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;INSTANCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTANCE&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;



&lt;span class="c1"&gt;##-----------------##&lt;/span&gt;
&lt;span class="c1"&gt;## Verify Instance ##&lt;/span&gt;
&lt;span class="c1"&gt;##-----------------##&lt;/span&gt;

&lt;span class="c1"&gt;# seems to take about 5-6 minutes for SSH fingerprints to show&lt;/span&gt;
&lt;span class="c1"&gt;# up in the output. wait for 2.5 minutes, then start polling output&lt;/span&gt;
&lt;span class="c1"&gt;#echo $'\n'&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Waiting for &lt;/span&gt;&lt;span class="nv"&gt;$INSTANCE&lt;/span&gt;&lt;span class="s2"&gt; to boot"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;

&lt;span class="nv"&gt;FINGERPRINTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 get-console-output --instance-id &lt;span class="nv"&gt;$INSTANCE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                egrep -m &lt;span class="m"&gt;1&lt;/span&gt; -o &lt;span class="s1"&gt;'([0-9a-f][0-9a-f]:){15}[0-9a-f][0-9a-f]'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;SSH_SERVER_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 get-console-output --instance-id &lt;span class="nv"&gt;$INSTANCE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                sed -n &lt;span class="s1"&gt;'s/^.*nssh-rsa //p'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s/ root@ip-.*$//g'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Check for FINGERPRINT every ~10 seconds (9 + runtime)&lt;/span&gt;
&lt;span class="c1"&gt;# Print "Booting..." every 60 seconds&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FINGERPRINTS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
        sleep &lt;span class="m"&gt;9&lt;/span&gt;
        &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;expr &lt;span class="nv"&gt;$i&lt;/span&gt; + &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
        &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;expr &lt;span class="nv"&gt;$i&lt;/span&gt; % &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -ne &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt; i &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Booting...(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="s2"&gt; min)"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Expected fingerprints are &lt;/span&gt;&lt;span class="nv"&gt;$FINGERPRINTS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# get hostname for the instance&lt;/span&gt;
&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 describe-instances &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        grep -m &lt;span class="m"&gt;1&lt;/span&gt; us-west-2.compute.amazonaws.com &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        egrep -o &lt;span class="s1"&gt;'ec2(-[0-9]+){4}.us-west-2.compute.amazonaws.com'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;HOST_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOST&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/ec2-//g;s/\..*//g;s/-/./g"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;HOST_ALIAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"aws-ec2"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Host is &lt;/span&gt;&lt;span class="nv"&gt;$HOST&lt;/span&gt;&lt;span class="s2"&gt; located at &lt;/span&gt;&lt;span class="nv"&gt;$HOST_IP&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;#cat host.key &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null&lt;/span&gt;

&lt;span class="c1"&gt;# ensure proper permissions are set on .pem file&lt;/span&gt;
chmod &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="nv"&gt;$KEY_LOC&lt;/span&gt;/&lt;span class="nv"&gt;$KEY&lt;/span&gt;.pem

&lt;span class="c1"&gt;# Read the private OpenSSH format from the *.pem file &lt;/span&gt;
&lt;span class="c1"&gt;# and output public key to host.key&lt;/span&gt;
ssh-keygen -yf &lt;span class="nv"&gt;$KEY_LOC&lt;/span&gt;/&lt;span class="nv"&gt;$KEY&lt;/span&gt;.pem &gt; host.key
&lt;span class="c1"&gt;# Output the fingerprint of the public key to host.fingerprint.&lt;/span&gt;
ssh-keygen -lf host.key &gt; host.fingerprint
&lt;span class="c1"&gt;# Store fingerprint from host.fingerprint into bash var for printing&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt; len ACTUAL_FINGERPRINTS host rsa &lt; host.fingerprint
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Actual fingerprints are &lt;/span&gt;&lt;span class="nv"&gt;$ACTUAL_FINGERPRINTS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ACTUAL_FINGERPRINTS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FINGERPRINTS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Fingerprints match, adding to known hosts"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Connecting..."&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;



&lt;span class="c1"&gt;### At this point the instance has been started, it has completed &lt;/span&gt;
&lt;span class="c1"&gt;### booting, ssh fingerprints have been validated. Next step is to &lt;/span&gt;
&lt;span class="c1"&gt;### store the credentials in known_hosts in your ~/.ssh folder&lt;/span&gt;



&lt;span class="c1"&gt;##-------------------##&lt;/span&gt;
&lt;span class="c1"&gt;## Store Credentials ##&lt;/span&gt;
&lt;span class="c1"&gt;##-------------------##&lt;/span&gt;

&lt;span class="c1"&gt;# Removes ec2* line(s) in known_hosts (e.g. from the last ec2 instance)&lt;/span&gt;
sed -i &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="s1"&gt;'/^ec2/d'&lt;/span&gt; ~/.ssh/known_hosts

&lt;span class="c1"&gt;# Make known_hosts entry from "HOST,HOST_IP ssh-rsa SSH_SERVER_KEY'&lt;/span&gt;
&lt;span class="c1"&gt;# and store in server.key&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOST&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$HOST_IP&lt;/span&gt;&lt;span class="s2"&gt; ssh-rsa &lt;/span&gt;&lt;span class="nv"&gt;$SSH_SERVER_KEY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &gt; server.key

&lt;span class="c1"&gt;## Optional: Hash server key in known hosts&lt;/span&gt;
&lt;span class="c1"&gt;#ssh-keygen -q -f -H server.key&lt;/span&gt;

&lt;span class="c1"&gt;# Add server.key to known_hosts&lt;/span&gt;
cat server.key &gt;&gt; ~/.ssh/known_hosts &lt;span class="m"&gt;2&lt;/span&gt;&gt;/dev/null

&lt;span class="c1"&gt;# Delete copies of ssh server key&lt;/span&gt;
gshred -u server.key host.key host.fingerprint



&lt;span class="c1"&gt;##-------------##&lt;/span&gt;
&lt;span class="c1"&gt;## Upload Data ##&lt;/span&gt;
&lt;span class="c1"&gt;##-------------##&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Uploading Data"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="c1"&gt;# Copy jupyter custom config files to instance&lt;/span&gt;
scp -i &lt;span class="nv"&gt;$KEY_LOC&lt;/span&gt;/&lt;span class="nv"&gt;$KEY&lt;/span&gt;.pem -rq ~/.jupyter ubuntu@&lt;span class="nv"&gt;$HOST&lt;/span&gt;:~/.jupyter

&lt;span class="c1"&gt;# # Copy installation script to instance since --data-file just hangs &lt;/span&gt;
&lt;span class="c1"&gt;# scp -i $KEY.pem ~/scripts/aws/start.txt ubuntu@$HOST:~/start&lt;/span&gt;

&lt;span class="c1"&gt;# # Copy data files to instance&lt;/span&gt;
&lt;span class="c1"&gt;# scp -i $KEY.pem -r ~/data ubuntu@$HOST:~/data&lt;/span&gt;



&lt;span class="c1"&gt;##------------------##&lt;/span&gt;
&lt;span class="c1"&gt;## Ready to Connect ##&lt;/span&gt;
&lt;span class="c1"&gt;##------------------##&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Ready to connect"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  In a terminal run:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    ssh -i &lt;/span&gt;&lt;span class="nv"&gt;$KEY_LOC&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$KEY&lt;/span&gt;&lt;span class="s2"&gt;.pem -L &lt;/span&gt;&lt;span class="nv"&gt;$PORT&lt;/span&gt;&lt;span class="s2"&gt;:127.0.0.1:8888 &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;$HOST&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  Then in the same terminal run:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    jupyter notebook"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  Then in the same terminal:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    (CMD + click) on the http://localhost:8888?token..... link"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  To end session cleanly, in the same terminal:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    1. Type (Ctrl + C) to kill notebook server and enter 'y' to \&lt;/span&gt;
&lt;span class="s2"&gt;confirm"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    2. Then run:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"         exit"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    3. Then run: "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"         aws ec2 terminate-instances --instance-ids &lt;/span&gt;&lt;span class="nv"&gt;$INSTANCE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;


&lt;span class="k"&gt;else&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Fingerprints do not match"&lt;/span&gt;

&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Waiting for i-014f48f62eb841fa1 to boot

Booting...(1 min)
Booting...(2 min)
Booting...(3 min)
Booting...(4 min)

Expected fingerprints are d4:26:c0:7c:77:b1:63:ff:01:37:48:ad:2b:23:c5:4d
Host is ec2-52-41-173-172.us-west-2.compute.amazonaws.com located at 52.41.173.172
Actual fingerprints are d4:26:c0:7c:77:b1:63:ff:01:37:48:ad:2b:23:c5:4d
Fingerprints match, adding to known hosts
Connecting...

Uploading Data




Ready to connect


  In a terminal run:

    ssh -i /Users/andrew/git/andrewtcrooks.com/content/notebooks/merlin.pem -L 8888:127.0.0.1:8888 ubuntu@ec2-52-41-173-172.us-west-2.compute.amazonaws.com


  Then in the same terminal run:

    jupyter notebook


  Then in the same terminal:

    (CMD + click) on the http://localhost:8888?token..... link


  To end session cleanly, in the same terminal:

    1. Type (Ctrl + C) to kill notebook server and enter 'y' to confirm

    2. Then run:

         exit

    3. Then run: 

         aws ec2 terminate-instances --instance-ids i-014f48f62eb841fa1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Required-files-(mappings.json)"&gt;Required files (mappings.json)&lt;a class="anchor-link" href="#Required-files-(mappings.json)"&gt;¶&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;EBS storage volume parameters for instance&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;

&lt;span class="c1"&gt;// copy text below here into mappings.json&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"DeviceName"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/dev/sda1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Ebs"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"VolumeSize"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"VolumeType"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"io1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"Iops"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6000&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div id="568bf42c-bc28-4f0e-9f90-87fa1eaa711e"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_javascript "&gt;
&lt;script type="text/javascript"&gt;
var element = $('#568bf42c-bc28-4f0e-9f90-87fa1eaa711e');

// copy text below here into mappings.json

[
  {
    "DeviceName": "/dev/sda1",
    "Ebs": {
      "VolumeSize": 120,
      "VolumeType": "io1",
      "Iops": 6000
    }
  }
]
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['$','$'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        " linebreaks: { automatic: true, width: '95% container' }, " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;
&lt;/p&gt;</content><category term="amazon"></category><category term="aws"></category><category term="ec2"></category><category term="data science"></category><category term="machine learning"></category><category term="deep learning"></category><category term="notebook"></category><category term="osx"></category><category term="mac"></category><category term="linux"></category><category term="anaconda"></category><category term="ipython"></category><category term="python"></category><category term="python3"></category></entry><entry><title>Data Viz with DiagrammeR and wordcloud</title><link href="http://www.andrewtcrooks.com/2017/06/05/Data_Viz_DiagrammeR_and_wordcloud/" rel="alternate"></link><published>2017-06-05T16:57:00-07:00</published><updated>2017-06-05T16:57:00-07:00</updated><author><name>andrew</name></author><id>tag:www.andrewtcrooks.com,2017-06-05:/2017/06/05/Data_Viz_DiagrammeR_and_wordcloud/</id><summary type="html">&lt;p&gt;example of some visuals you can make in R and python&lt;/p&gt;</summary><content type="html">&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="DiagrammeR-Viz-in-Jupyter-Python-notebook"&gt;DiagrammeR Viz in Jupyter Python notebook&lt;a class="anchor-link" href="#DiagrammeR-Viz-in-Jupyter-Python-notebook"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rpy2&lt;/span&gt;

&lt;span class="c1"&gt;# Enables R line magic (%R) and cell magic (%%R)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;load_ext&lt;/span&gt; rpy2.ipython 

&lt;span class="c1"&gt;# # r enables calls to r objects and &lt;/span&gt;
&lt;span class="c1"&gt;# # pandas2ri allows conversion both ways&lt;/span&gt;
&lt;span class="c1"&gt;# from rpy2.robjects import r, pandas2ri    &lt;/span&gt;

&lt;span class="c1"&gt;# Ignore rpy2 RRuntimeWarning complaining&lt;/span&gt;
&lt;span class="c1"&gt;# about packages, they work fine!&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpy2.rinterface&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RRuntimeWarning&lt;/span&gt;
&lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterwarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ignore"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RRuntimeWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Enables rendering a string of HTML code &lt;/span&gt;
&lt;span class="c1"&gt;# as an image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The code cell below shows an example of DiagrammeR. It's mostly gleaned from the source below the image with a few added aesthetic changes.&lt;/p&gt;
&lt;p&gt;To get the code below to work correctly and print inline instead of to a new window on Mac OSX, you will likely need to do the following first:&lt;/p&gt;
&lt;p&gt;In a terminal "brew install v8@3.15"&lt;/p&gt;
&lt;p&gt;In R "install.packages("v8");install.packages("DiagrammeR");install.packages("DiagrammeRsvg")&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;R

&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;DiagrammeR&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;DiagrammeRsvg&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# provides export_svg command&lt;/span&gt;

plot.script &lt;span class="o"&gt;&lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"digraph 'ER-D' {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"graph [layout = neato]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"node ["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"style = filled,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"penwidth = 3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"node ["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"color = royalblue,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"fillcolor = cornflowerblue,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"shape = egg,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"width = 01.00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"aisles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"departments"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"products"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"order_products__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"node ["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"color = forestgreen,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"fillcolor = darkseagreen,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"shape = box,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"width = 0.40,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"height = 0.30,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"fontsize = 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"edge ["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"color = grey,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"arrowhead = none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"aisles -&gt; {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"aisle_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"aisle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"departments -&gt; {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"department_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"department"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       
                         &lt;span class="s"&gt;"orders -&gt; {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"order_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"eval_set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"order_number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"order_dow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"order_hour_of_day"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"days_since_prior_order"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"products -&gt; {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"product_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"product_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"aisle_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"department_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"order_products__ -&gt; {"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"order_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"product_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"add_to_cart_order"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;"reordered"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
svg &lt;span class="o"&gt;&lt;-&lt;/span&gt; export_svg&lt;span class="p"&gt;(&lt;/span&gt;grViz&lt;span class="p"&gt;(&lt;/span&gt;plot.script&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rpy2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robjects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea "&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: ER&amp;#45;D Pages: 1 --&gt;
&lt;svg height="364pt" viewbox="0.00 0.00 668.78 363.66" width="669pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 359.6611)"&gt;
&lt;title&gt;ER-D&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-359.6611 664.7786,-359.6611 664.7786,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- aisles --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;aisles&lt;/title&gt;
&lt;polygon fill="#6495ed" points="83.5974,-287.4672 85.9348,-287.5657 88.2479,-287.7132 90.5275,-287.9092 92.7642,-288.1532 94.949,-288.4445 97.0735,-288.7823 99.1292,-289.1657 101.1084,-289.5937 103.0037,-290.0651 104.8084,-290.5785 106.516,-291.1326 108.121,-291.7258 109.6182,-292.3566 111.0033,-293.0232 112.2724,-293.7238 113.4223,-294.4564 114.4506,-295.219 115.3556,-296.0096 116.136,-296.826 116.7913,-297.666 117.3217,-298.5272 117.7279,-299.4073 118.0112,-300.3038 118.1735,-301.2144 118.2171,-302.1365 118.1451,-303.0676 117.9605,-304.0051 117.6672,-304.9465 117.2692,-305.8892 116.7709,-306.8306 116.1768,-307.7681 115.4919,-308.6992 114.7211,-309.6213 113.8694,-310.5319 112.9422,-311.4284 111.9445,-312.3085 110.8814,-313.1697 109.7582,-314.0096 108.5799,-314.826 107.3512,-315.6166 106.0769,-316.3793 104.7614,-317.1119 103.4092,-317.8125 102.0241,-318.479 100.6101,-319.1098 99.1706,-319.7031 97.7089,-320.2572 96.228,-320.7706 94.7307,-321.242 93.2193,-321.6699 91.6962,-322.0534 90.1633,-322.3912 88.6224,-322.6825 87.0751,-322.9265 85.5227,-323.1225 83.9666,-323.27 82.4078,-323.3685 80.8476,-323.4178 79.2868,-323.4178 77.7265,-323.3685 76.1678,-323.27 74.6117,-323.1225 73.0593,-322.9265 71.5119,-322.6825 69.971,-322.3912 68.4381,-322.0534 66.915,-321.6699 65.4037,-321.242 63.9063,-320.7706 62.4255,-320.2572 60.9638,-319.7031 59.5243,-319.1098 58.1102,-318.479 56.7252,-317.8125 55.3729,-317.1119 54.0575,-316.3793 52.7832,-315.6166 51.5545,-314.826 50.3761,-314.0096 49.2529,-313.1697 48.1899,-312.3085 47.1922,-311.4284 46.2649,-310.5319 45.4133,-309.6213 44.6424,-308.6992 43.9575,-307.7681 43.3634,-306.8306 42.8651,-305.8892 42.4671,-304.9465 42.1738,-304.0051 41.9893,-303.0676 41.9172,-302.1365 41.9609,-301.2144 42.1231,-300.3038 42.4065,-299.4073 42.8126,-298.5272 43.343,-297.666 43.9984,-296.826 44.7787,-296.0096 45.6837,-295.219 46.712,-294.4564 47.862,-293.7238 49.131,-293.0232 50.5161,-292.3566 52.0133,-291.7258 53.6183,-291.1326 55.326,-290.5785 57.1306,-290.0651 59.026,-289.5937 61.0052,-289.1657 63.0609,-288.7823 65.1853,-288.4445 67.3702,-288.1532 69.6069,-287.9092 71.8864,-287.7132 74.1996,-287.5657 76.5369,-287.4672 78.8888,-287.4178 81.2455,-287.4178 83.5974,-287.4672" stroke="#4169e1" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="80.0672" y="-301.2178"&gt;aisles&lt;/text&gt;
&lt;/g&gt;
&lt;!-- aisle_id --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;aisle_id&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="164.7395,-267.3372 120.7523,-267.3372 120.7523,-245.3372 164.7395,-245.3372 164.7395,-267.3372" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="142.7459" y="-253.6372"&gt;aisle_id&lt;/text&gt;
&lt;/g&gt;
&lt;!-- aisles&amp;#45;&amp;gt;aisle_id --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;aisles-&gt;aisle_id&lt;/title&gt;
&lt;path d="M100.5905,-289.347C109.7304,-282.19 120.2692,-273.9375 128.5231,-267.4743" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- aisle --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;aisle&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="32.7425,-355.6611 -.25,-355.6611 -.25,-333.6611 32.7425,-333.6611 32.7425,-355.6611" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="16.2463" y="-341.9611"&gt;aisle&lt;/text&gt;
&lt;/g&gt;
&lt;!-- aisles&amp;#45;&amp;gt;aisle --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;aisles-&gt;aisle&lt;/title&gt;
&lt;path d="M58.4603,-318.7038C50.0707,-323.8625 40.6167,-329.6758 32.7855,-334.4911" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- departments --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;departments&lt;/title&gt;
&lt;polygon fill="#6495ed" points="154.0998,-55.5635 157.9,-55.662 161.6609,-55.8095 165.3671,-56.0055 169.0036,-56.2495 172.556,-56.5408 176.01,-56.8786 179.3523,-57.2621 182.5702,-57.69 185.6518,-58.1614 188.5859,-58.6748 191.3623,-59.2289 193.9718,-59.8222 196.4061,-60.4529 198.658,-61.1195 200.7213,-61.8201 202.591,-62.5527 204.2629,-63.3153 205.7342,-64.106 207.003,-64.9224 208.0685,-65.7623 208.9309,-66.6235 209.5913,-67.5036 210.0519,-68.4001 210.3158,-69.3107 210.3867,-70.2328 210.2695,-71.1639 209.9695,-72.1014 209.4926,-73.0428 208.8455,-73.9855 208.0353,-74.9269 207.0695,-75.8644 205.9559,-76.7955 204.7026,-77.7176 203.318,-78.6282 201.8104,-79.5247 200.1882,-80.4048 198.4599,-81.266 196.6337,-82.106 194.7179,-82.9224 192.7202,-83.713 190.6483,-84.4756 188.5096,-85.2082 186.311,-85.9088 184.0591,-86.5754 181.76,-87.2062 179.4196,-87.7994 177.0431,-88.3535 174.6354,-88.8669 172.2009,-89.3383 169.7437,-89.7663 167.2673,-90.1497 164.7751,-90.4875 162.2697,-90.7788 159.754,-91.0228 157.23,-91.2188 154.7,-91.3663 152.1657,-91.4648 149.6289,-91.5142 147.0913,-91.5142 144.5545,-91.4648 142.0202,-91.3663 139.4902,-91.2188 136.9662,-91.0228 134.4504,-90.7788 131.9451,-90.4875 129.4529,-90.1497 126.9765,-89.7663 124.5193,-89.3383 122.0848,-88.8669 119.6771,-88.3535 117.3006,-87.7994 114.9602,-87.2062 112.6611,-86.5754 110.4092,-85.9088 108.2106,-85.2082 106.0719,-84.4756 104,-83.713 102.0023,-82.9224 100.0864,-82.106 98.2603,-81.266 96.532,-80.4048 94.9098,-79.5247 93.4022,-78.6282 92.0176,-77.7176 90.7643,-76.7955 89.6507,-75.8644 88.6849,-74.9269 87.8746,-73.9855 87.2276,-73.0428 86.7507,-72.1014 86.4506,-71.1639 86.3334,-70.2328 86.4044,-69.3107 86.6683,-68.4001 87.1289,-67.5036 87.7893,-66.6235 88.6517,-65.7623 89.7171,-64.9224 90.9859,-64.106 92.4572,-63.3153 94.1292,-62.5527 95.9988,-61.8201 98.0622,-61.1195 100.3141,-60.4529 102.7484,-59.8222 105.3579,-59.2289 108.1343,-58.6748 111.0684,-58.1614 114.1499,-57.69 117.3679,-57.2621 120.7102,-56.8786 124.1642,-56.5408 127.7165,-56.2495 131.3531,-56.0055 135.0593,-55.8095 138.8202,-55.662 142.6204,-55.5635 146.4442,-55.5142 150.276,-55.5142 154.0998,-55.5635" stroke="#4169e1" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="148.3601" y="-69.3142"&gt;departments&lt;/text&gt;
&lt;/g&gt;
&lt;!-- department_id --&gt;
&lt;g class="node" id="node8"&gt;
&lt;title&gt;department_id&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="223.0343,-152.3532 155.0627,-152.3532 155.0627,-130.3532 223.0343,-130.3532 223.0343,-152.3532" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="189.0485" y="-138.6532"&gt;department_id&lt;/text&gt;
&lt;/g&gt;
&lt;!-- departments&amp;#45;&amp;gt;department_id --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;departments-&gt;department_id&lt;/title&gt;
&lt;path d="M159.0505,-91.3381C166.3967,-103.5862 175.9291,-119.4795 182.2554,-130.0272" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- department --&gt;
&lt;g class="node" id="node9"&gt;
&lt;title&gt;department&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="133.8282,-22 76.8546,-22 76.8546,0 133.8282,0 133.8282,-22" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="105.3414" y="-8.3"&gt;department&lt;/text&gt;
&lt;/g&gt;
&lt;!-- departments&amp;#45;&amp;gt;department --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;departments-&gt;department&lt;/title&gt;
&lt;path d="M135.9173,-55.4325C128.5722,-44.7587 119.5005,-31.5758 113.1536,-22.3526" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- orders --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;orders&lt;/title&gt;
&lt;polygon fill="#6495ed" points="548.6389,-177.1762 550.9762,-177.2748 553.2894,-177.4222 555.5689,-177.6182 557.8056,-177.8622 559.9905,-178.1535 562.1149,-178.4913 564.1706,-178.8748 566.1498,-179.3027 568.0452,-179.7741 569.8498,-180.2875 571.5575,-180.8416 573.1624,-181.4349 574.6597,-182.0657 576.0447,-182.7322 577.3138,-183.4328 578.4638,-184.1654 579.4921,-184.9281 580.397,-185.7187 581.1774,-186.5351 581.8327,-187.375 582.3631,-188.2362 582.7693,-189.1163 583.0526,-190.0128 583.2149,-190.9234 583.2586,-191.8455 583.1865,-192.7766 583.002,-193.7141 582.7087,-194.6555 582.3107,-195.5982 581.8123,-196.5396 581.2183,-197.4772 580.5334,-198.4082 579.7625,-199.3303 578.9109,-200.2409 577.9836,-201.1375 576.9859,-202.0175 575.9229,-202.8787 574.7997,-203.7187 573.6213,-204.5351 572.3926,-205.3257 571.1183,-206.0883 569.8029,-206.8209 568.4506,-207.5215 567.0656,-208.1881 565.6515,-208.8189 564.212,-209.4121 562.7503,-209.9662 561.2695,-210.4797 559.7721,-210.951 558.2608,-211.379 556.7377,-211.7624 555.2048,-212.1002 553.6639,-212.3915 552.1165,-212.6355 550.5641,-212.8315 549.008,-212.979 547.4493,-213.0775 545.889,-213.1269 544.3282,-213.1269 542.768,-213.0775 541.2092,-212.979 539.6531,-212.8315 538.1007,-212.6355 536.5534,-212.3915 535.0125,-212.1002 533.4796,-211.7624 531.9565,-211.379 530.4451,-210.951 528.9478,-210.4797 527.4669,-209.9662 526.0052,-209.4121 524.5657,-208.8189 523.1517,-208.1881 521.7666,-207.5215 520.4144,-206.8209 519.0989,-206.0883 517.8246,-205.3257 516.5959,-204.5351 515.4175,-203.7187 514.2943,-202.8787 513.2313,-202.0175 512.2336,-201.1375 511.3063,-200.2409 510.4547,-199.3303 509.6839,-198.4082 508.9989,-197.4772 508.4049,-196.5396 507.9066,-195.5982 507.5086,-194.6555 507.2153,-193.7141 507.0307,-192.7766 506.9586,-191.8455 507.0023,-190.9234 507.1646,-190.0128 507.4479,-189.1163 507.8541,-188.2362 508.3845,-187.375 509.0398,-186.5351 509.8202,-185.7187 510.7251,-184.9281 511.7535,-184.1654 512.9034,-183.4328 514.1725,-182.7322 515.5575,-182.0657 517.0548,-181.4349 518.6598,-180.8416 520.3674,-180.2875 522.1721,-179.7741 524.0674,-179.3027 526.0466,-178.8748 528.1023,-178.4913 530.2268,-178.1535 532.4116,-177.8622 534.6483,-177.6182 536.9279,-177.4222 539.241,-177.2748 541.5784,-177.1762 543.9302,-177.1269 546.287,-177.1269 548.6389,-177.1762" stroke="#4169e1" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="545.1086" y="-190.9269"&gt;orders&lt;/text&gt;
&lt;/g&gt;
&lt;!-- order_id --&gt;
&lt;g class="node" id="node10"&gt;
&lt;title&gt;order_id&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="484.8071,-234.8603 437.8251,-234.8603 437.8251,-212.8603 484.8071,-212.8603 484.8071,-234.8603" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="461.3161" y="-221.1603"&gt;order_id&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;order_id --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;orders-&gt;order_id&lt;/title&gt;
&lt;path d="M516.7403,-204.8547C506.2951,-208.4365 494.5932,-212.4492 484.6431,-215.8612" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- user_id --&gt;
&lt;g class="node" id="node11"&gt;
&lt;title&gt;user_id&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="579.5628,-119.6286 536.5723,-119.6286 536.5723,-97.6286 579.5628,-97.6286 579.5628,-119.6286" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="558.0675" y="-105.9286"&gt;user_id&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;user_id --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;orders-&gt;user_id&lt;/title&gt;
&lt;path d="M547.8569,-176.7828C550.4424,-159.525 554.2303,-134.2415 556.3916,-119.8149" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- eval_set --&gt;
&lt;g class="node" id="node12"&gt;
&lt;title&gt;eval_set&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="531.0154,-136.4918 485.0349,-136.4918 485.0349,-114.4918 531.0154,-114.4918 531.0154,-136.4918" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="508.0251" y="-122.7918"&gt;eval_set&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;eval_set --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;orders-&gt;eval_set&lt;/title&gt;
&lt;path d="M535.5587,-177.1941C528.7773,-164.4601 519.8786,-147.7501 514.0593,-136.8227" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- order_number --&gt;
&lt;g class="node" id="node13"&gt;
&lt;title&gt;order_number&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="660.7684,-207.0363 593.8092,-207.0363 593.8092,-185.0363 660.7684,-185.0363 660.7684,-207.0363" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="627.2888" y="-193.3363"&gt;order_number&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;order_number --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;orders-&gt;order_number&lt;/title&gt;
&lt;path d="M582.3515,-195.539C586.0888,-195.5804 589.8688,-195.6222 593.5666,-195.6631" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- order_dow --&gt;
&lt;g class="node" id="node14"&gt;
&lt;title&gt;order_dow&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="637.7089,-263.0592 582.7401,-263.0592 582.7401,-241.0592 637.7089,-241.0592 637.7089,-263.0592" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="610.2245" y="-249.3592"&gt;order_dow&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;order_dow --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;orders-&gt;order_dow&lt;/title&gt;
&lt;path d="M562.5585,-210.3837C573.5587,-220.0015 587.5155,-232.2042 597.4786,-240.9152" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- order_hour_of_day --&gt;
&lt;g class="node" id="node15"&gt;
&lt;title&gt;order_hour_of_day&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="605.8712,-285.753 519.9194,-285.753 519.9194,-263.753 605.8712,-263.753 605.8712,-285.753" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="562.8953" y="-272.053"&gt;order_hour_of_day&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;order_hour_of_day --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;orders-&gt;order_hour_of_day&lt;/title&gt;
&lt;path d="M549.1447,-213.1953C552.5886,-228.6126 557.4342,-250.3053 560.3587,-263.3974" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- days_since_prior_order --&gt;
&lt;g class="node" id="node16"&gt;
&lt;title&gt;days_since_prior_order&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="657.1788,-150.4443 556.2443,-150.4443 556.2443,-128.4443 657.1788,-128.4443 657.1788,-150.4443" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="606.7116" y="-136.7443"&gt;days_since_prior_order&lt;/text&gt;
&lt;/g&gt;
&lt;!-- orders&amp;#45;&amp;gt;days_since_prior_order --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;orders-&gt;days_since_prior_order&lt;/title&gt;
&lt;path d="M563.5915,-178.4203C573.5149,-169.4506 585.4806,-158.6349 594.287,-150.6748" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- products --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;products&lt;/title&gt;
&lt;polygon fill="#6495ed" points="224.5081,-201.9348 227.4081,-202.0334 230.2782,-202.1808 233.1066,-202.3768 235.8818,-202.6208 238.5927,-202.9121 241.2287,-203.25 243.7793,-203.6334 246.2351,-204.0614 248.5867,-204.5327 250.8258,-205.0461 252.9446,-205.6002 254.9361,-206.1935 256.7938,-206.8243 258.5123,-207.4909 260.0869,-208.1914 261.5137,-208.924 262.7897,-209.6867 263.9125,-210.4773 264.8808,-211.2937 265.6939,-212.1336 266.352,-212.9948 266.856,-213.8749 267.2075,-214.7715 267.4088,-215.682 267.463,-216.6041 267.3736,-217.5352 267.1446,-218.4727 266.7807,-219.4141 266.2869,-220.3568 265.6686,-221.2982 264.9315,-222.2358 264.0816,-223.1669 263.1252,-224.0889 262.0685,-224.9995 260.918,-225.8961 259.6801,-226.7761 258.3611,-227.6373 256.9675,-228.4773 255.5054,-229.2937 253.9809,-230.0843 252.3998,-230.8469 250.7676,-231.5796 249.0898,-232.2801 247.3712,-232.9467 245.6168,-233.5775 243.8307,-234.1707 242.0171,-234.7248 240.1796,-235.2383 238.3218,-235.7096 236.4466,-236.1376 234.5568,-236.521 232.6548,-236.8588 230.7429,-237.1502 228.823,-237.3941 226.8969,-237.5901 224.9661,-237.7376 223.032,-237.8361 221.0961,-237.8855 219.1596,-237.8855 217.2236,-237.8361 215.2896,-237.7376 213.3588,-237.5901 211.4327,-237.3941 209.5128,-237.1502 207.6009,-236.8588 205.6989,-236.521 203.8091,-236.1376 201.9339,-235.7096 200.076,-235.2383 198.2386,-234.7248 196.425,-234.1707 194.6389,-233.5775 192.8844,-232.9467 191.1659,-232.2801 189.4881,-231.5796 187.8559,-230.8469 186.2748,-230.0843 184.7503,-229.2937 183.2882,-228.4773 181.8946,-227.6373 180.5756,-226.7761 179.3377,-225.8961 178.1871,-224.9995 177.1305,-224.0889 176.174,-223.1669 175.3242,-222.2358 174.5871,-221.2982 173.9688,-220.3568 173.475,-219.4141 173.1111,-218.4727 172.8821,-217.5352 172.7927,-216.6041 172.8468,-215.682 173.0482,-214.7715 173.3997,-213.8749 173.9037,-212.9948 174.5618,-212.1336 175.3749,-211.2937 176.3432,-210.4773 177.466,-209.6867 178.7419,-208.924 180.1687,-208.1914 181.7434,-207.4909 183.4619,-206.8243 185.3196,-206.1935 187.311,-205.6002 189.4298,-205.0461 191.669,-204.5327 194.0206,-204.0614 196.4764,-203.6334 199.027,-203.25 201.6629,-202.9121 204.3739,-202.6208 207.1491,-202.3768 209.9774,-202.1808 212.8475,-202.0334 215.7476,-201.9348 218.6658,-201.8855 221.5899,-201.8855 224.5081,-201.9348" stroke="#4169e1" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="220.1278" y="-215.6855"&gt;products&lt;/text&gt;
&lt;/g&gt;
&lt;!-- products&amp;#45;&amp;gt;aisle_id --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;products-&gt;aisle_id&lt;/title&gt;
&lt;path d="M192.1912,-233.0454C183.1866,-237.2871 173.3378,-241.9265 164.8169,-245.9404" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- products&amp;#45;&amp;gt;department_id --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;products-&gt;department_id&lt;/title&gt;
&lt;path d="M212.9195,-201.6712C206.8944,-186.4467 198.4968,-165.2276 193.4355,-152.4384" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- product_id --&gt;
&lt;g class="node" id="node17"&gt;
&lt;title&gt;product_id&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="333.3731,-242.3035 278.3863,-242.3035 278.3863,-220.3035 333.3731,-220.3035 333.3731,-242.3035" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="305.8797" y="-228.6035"&gt;product_id&lt;/text&gt;
&lt;/g&gt;
&lt;!-- products&amp;#45;&amp;gt;product_id --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;products-&gt;product_id&lt;/title&gt;
&lt;path d="M261.7478,-225.4273C267.3805,-226.1773 273.0422,-226.9311 278.3436,-227.637" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- product_name --&gt;
&lt;g class="node" id="node18"&gt;
&lt;title&gt;product_name&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="242.1835,-307.0346 174.2128,-307.0346 174.2128,-285.0346 242.1835,-285.0346 242.1835,-307.0346" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="208.1982" y="-293.3346"&gt;product_name&lt;/text&gt;
&lt;/g&gt;
&lt;!-- products&amp;#45;&amp;gt;product_name --&gt;
&lt;g class="edge" id="edge15"&gt;
&lt;title&gt;products-&gt;product_name&lt;/title&gt;
&lt;path d="M217.3007,-237.9318C215.0131,-252.5335 211.8649,-272.6292 209.934,-284.9543" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- order_products__ --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;order_products__&lt;/title&gt;
&lt;polygon fill="#6495ed" points="393.7226,-246.7498 398.8739,-246.8483 403.9719,-246.9958 408.9958,-247.1918 413.9253,-247.4358 418.7406,-247.7271 423.4227,-248.0649 427.9534,-248.4484 432.3154,-248.8763 436.4926,-249.3477 440.4698,-249.8611 444.2334,-250.4152 447.7707,-251.0085 451.0705,-251.6393 454.123,-252.3058 456.92,-253.0064 459.4544,-253.739 461.7207,-254.5017 463.7152,-255.2923 465.4351,-256.1087 466.8794,-256.9486 468.0483,-257.8098 468.9435,-258.6899 469.5679,-259.5864 469.9256,-260.497 470.0218,-261.4191 469.8629,-262.3502 469.4562,-263.2877 468.8098,-264.2291 467.9327,-265.1718 466.8344,-266.1132 465.5252,-267.0508 464.0156,-267.9818 462.3168,-268.9039 460.4398,-269.8145 458.3962,-270.7111 456.1973,-271.5911 453.8545,-272.4523 451.379,-273.2923 448.782,-274.1087 446.074,-274.8993 443.2655,-275.6619 440.3664,-276.3945 437.3861,-277.0951 434.3336,-277.7617 431.2171,-278.3925 428.0446,-278.9857 424.8231,-279.5398 421.5594,-280.0533 418.2594,-280.5246 414.9285,-280.9526 411.5717,-281.336 408.1933,-281.6738 404.7972,-281.9651 401.387,-282.2091 397.9657,-282.4051 394.5361,-282.5526 391.1008,-282.6511 387.6621,-282.7005 384.2222,-282.7005 380.7835,-282.6511 377.3482,-282.5526 373.9186,-282.4051 370.4973,-282.2091 367.087,-281.9651 363.691,-281.6738 360.3126,-281.336 356.9558,-280.9526 353.6249,-280.5246 350.3249,-280.0533 347.0612,-279.5398 343.8397,-278.9857 340.6672,-278.3925 337.5507,-277.7617 334.4982,-277.0951 331.5179,-276.3945 328.6187,-275.6619 325.8103,-274.8993 323.1023,-274.1087 320.5052,-273.2923 318.0298,-272.4523 315.687,-271.5911 313.4881,-270.7111 311.4445,-269.8145 309.5675,-268.9039 307.8687,-267.9818 306.3591,-267.0508 305.0499,-266.1132 303.9516,-265.1718 303.0745,-264.2291 302.4281,-263.2877 302.0214,-262.3502 301.8625,-261.4191 301.9587,-260.497 302.3164,-259.5864 302.9408,-258.6899 303.836,-257.8098 305.0049,-256.9486 306.4492,-256.1087 308.1691,-255.2923 310.1635,-254.5017 312.4299,-253.739 314.9643,-253.0064 317.7612,-252.3058 320.8138,-251.6393 324.1136,-251.0085 327.6509,-250.4152 331.4144,-249.8611 335.3917,-249.3477 339.5689,-248.8763 343.9309,-248.4484 348.4616,-248.0649 353.1437,-247.7271 357.959,-247.4358 362.8884,-247.1918 367.9124,-246.9958 373.0104,-246.8483 378.1617,-246.7498 383.3451,-246.7005 388.5392,-246.7005 393.7226,-246.7498" stroke="#4169e1" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="385.9421" y="-260.5005"&gt;order_products__&lt;/text&gt;
&lt;/g&gt;
&lt;!-- order_products__&amp;#45;&amp;gt;order_id --&gt;
&lt;g class="edge" id="edge16"&gt;
&lt;title&gt;order_products__-&gt;order_id&lt;/title&gt;
&lt;path d="M417.4708,-247.6172C425.3775,-243.333 433.656,-238.8474 440.8629,-234.9425" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- order_products__&amp;#45;&amp;gt;product_id --&gt;
&lt;g class="edge" id="edge17"&gt;
&lt;title&gt;order_products__-&gt;product_id&lt;/title&gt;
&lt;path d="M346.38,-248.1977C341.6525,-246.2256 336.9162,-244.25 332.435,-242.3807" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- add_to_cart_order --&gt;
&lt;g class="node" id="node19"&gt;
&lt;title&gt;add_to_cart_order&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="405.2829,-354.3845 323.3411,-354.3845 323.3411,-332.3845 405.2829,-332.3845 405.2829,-354.3845" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="364.312" y="-340.6845"&gt;add_to_cart_order&lt;/text&gt;
&lt;/g&gt;
&lt;!-- order_products__&amp;#45;&amp;gt;add_to_cart_order --&gt;
&lt;g class="edge" id="edge18"&gt;
&lt;title&gt;order_products__-&gt;add_to_cart_order&lt;/title&gt;
&lt;path d="M380.9254,-282.9499C376.7321,-298.2039 370.8877,-319.464 367.3652,-332.2779" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;!-- reordered --&gt;
&lt;g class="node" id="node20"&gt;
&lt;title&gt;reordered&lt;/title&gt;
&lt;polygon fill="#8fbc8f" points="443.0705,-354.7206 392.1188,-354.7206 392.1188,-332.7206 443.0705,-332.7206 443.0705,-354.7206" stroke="#228b22" stroke-width="3"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="9.00" text-anchor="middle" x="417.5946" y="-341.0206"&gt;reordered&lt;/text&gt;
&lt;/g&gt;
&lt;!-- order_products__&amp;#45;&amp;gt;reordered --&gt;
&lt;g class="edge" id="edge19"&gt;
&lt;title&gt;order_products__-&gt;reordered&lt;/title&gt;
&lt;path d="M393.1246,-282.6314C399.2532,-297.9314 407.8764,-319.4591 413.0806,-332.4515" fill="none" stroke="#c0c0c0"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I really like this DiagrammeR package. Using the settings above it reminds me of the sklearn cheat sheet.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.kaggle.com/kenny21143/entity-relationship-diagram" title="https://www.kaggle.com/kenny21143/entity-relationship-diagram"&gt;Source&lt;/a&gt;
&lt;a href="http://rich-iannone.github.io/DiagrammeR/" title="http://rich-iannone.github.io/DiagrammeR/"&gt;(made with DiagrammeR)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="R-vs-Python-for-reading-data-and-importing-data-into-the-other-language"&gt;R vs Python for reading data and importing data into the other language&lt;a class="anchor-link" href="#R-vs-Python-for-reading-data-and-importing-data-into-the-other-language"&gt;¶&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Everyone still using pandas.read_csv() needs to read this. A much faster option is fread() from the R package data.table. On my late 2012 MBPr, using fread() instead of read_csv() makes a ~0.5GB data read take a few seconds instead of a few minutes. The reason behind this is that pandas.read_csv() is python based while fread() is C based.&lt;/p&gt;
&lt;p&gt;Further, reading into R and importing into python is much faster than the reverse process. When you read into python using pandas.read_csv() and then import into R using pandas2ri.py2ri(), you have made two complete copies of the data in memory. When you read into R using "data &lt;- fread()" and then import into python using "py_var = pandas2ri.ri2py(r.data)" something different happens. A vector pointer is created instead of making a complete copy of the data. The creation of the vector pointer is almost instantaneous, while a complete copy of the data is unbearably slow for anything larger than ~0.5GB.&lt;/p&gt;
&lt;p&gt;Like the reading of the data, the importing from one to the other takes a long time from Python to R and seconds from R to python.&lt;/p&gt;
&lt;p&gt;If you prefer using Python, consider using R as a speed loader for your data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;R

&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.table&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# for fread()&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# data table manipulation (joins, group_by, etc)&lt;/span&gt;

orders &lt;span class="o"&gt;&lt;-&lt;/span&gt; fread&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/Users/andrew/Desktop/data/orders.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
products &lt;span class="o"&gt;&lt;-&lt;/span&gt; fread&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/Users/andrew/Desktop/data/products.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
aisles &lt;span class="o"&gt;&lt;-&lt;/span&gt; fread&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/Users/andrew/Desktop/data/aisles.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
departments &lt;span class="o"&gt;&lt;-&lt;/span&gt; fread&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/Users/andrew/Desktop/data/departments.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
order_products &lt;span class="o"&gt;&lt;-&lt;/span&gt; fread&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/Users/andrew/Desktop/data/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s"&gt;'order_products__train.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;# Combine aisle and deparment data with product data&lt;/span&gt;
tmp &lt;span class="o"&gt;&lt;-&lt;/span&gt; products &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
    group_by&lt;span class="p"&gt;(&lt;/span&gt;department_id&lt;span class="p"&gt;,&lt;/span&gt; aisle_id&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
    summarise&lt;span class="p"&gt;(&lt;/span&gt;n_items&lt;span class="o"&gt;=&lt;/span&gt;n&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
    left_join&lt;span class="p"&gt;(&lt;/span&gt;departments&lt;span class="p"&gt;,&lt;/span&gt;by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"department_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
    left_join&lt;span class="p"&gt;(&lt;/span&gt;aisles&lt;span class="p"&gt;,&lt;/span&gt;by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"aisle_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Combine with order_products__(train) to find total items sold in &lt;/span&gt;
&lt;span class="c1"&gt;# each aisle as n_orders&lt;/span&gt;
goods&lt;span class="o"&gt;&lt;-&lt;/span&gt;order_products &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  group_by&lt;span class="p"&gt;(&lt;/span&gt;product_id&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  summarize&lt;span class="p"&gt;(&lt;/span&gt;count&lt;span class="o"&gt;=&lt;/span&gt;n&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  left_join&lt;span class="p"&gt;(&lt;/span&gt;products&lt;span class="p"&gt;,&lt;/span&gt;by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  ungroup&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  group_by&lt;span class="p"&gt;(&lt;/span&gt;department_id&lt;span class="p"&gt;,&lt;/span&gt;aisle_id&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  summarize&lt;span class="p"&gt;(&lt;/span&gt;n_orders &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;count&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  left_join&lt;span class="p"&gt;(&lt;/span&gt;tmp&lt;span class="p"&gt;,&lt;/span&gt; by &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"department_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"aisle_id"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&gt;%&lt;/span&gt; 
  mutate&lt;span class="p"&gt;(&lt;/span&gt;onesize &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now let's check out the header on the data frame we just made.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;R&lt;/span&gt; goods %&gt;% head(1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
&lt;thead&gt;
&lt;tr style="text-align: right;"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;department_id&lt;/th&gt;
&lt;th&gt;aisle_id&lt;/th&gt;
&lt;th&gt;n_orders&lt;/th&gt;
&lt;th&gt;n_items&lt;/th&gt;
&lt;th&gt;department&lt;/th&gt;
&lt;th&gt;aisle&lt;/th&gt;
&lt;th&gt;onesize&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;3341&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;frozen&lt;/td&gt;
&lt;td&gt;frozen meat seafood&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here you can see how to print just the columns you are interested in viewing.&lt;/p&gt;
&lt;p&gt;Notice how the %R call prints the data.table object from R into a pandas data-frame output.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# select n_orders and aisles column from goods in R&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;R&lt;/span&gt; goods_tmp &lt;- goods[ ,c(6,3)] 
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;R&lt;/span&gt; goods_tmp %&gt;% head(5) 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;
&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
&lt;thead&gt;
&lt;tr style="text-align: right;"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;aisle&lt;/th&gt;
&lt;th&gt;n_orders&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;frozen meat seafood&lt;/td&gt;
&lt;td&gt;3341&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;ice cream ice&lt;/td&gt;
&lt;td&gt;22676&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;frozen meals&lt;/td&gt;
&lt;td&gt;18221&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;frozen vegan vegetarian&lt;/td&gt;
&lt;td&gt;4727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;frozen breakfast&lt;/td&gt;
&lt;td&gt;9729&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Wordcloud-Viz-in-Python"&gt;Wordcloud Viz in Python&lt;a class="anchor-link" href="#Wordcloud-Viz-in-Python"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The python version of wordcloud is superior to the R version because you can use images as a mask and you can use the colors in the image as the color scheme!&lt;/p&gt;
&lt;p&gt;Dependencies:&lt;/p&gt;
&lt;p&gt;In a terminal run "conda install -c conda-forge wordcloud=1.2.1; conda install pillow"&lt;/p&gt;
&lt;p&gt;&lt;a href="https://amueller.github.io/word_cloud/auto_examples/colored.html" title="https://amueller.github.io/word_cloud/auto_examples/colored.html"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wordcloud&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCloud&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STOPWORDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageColorGenerator&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;config&lt;/span&gt; InlineBackend.figure_format = 'svg'

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/Users/andrew/Desktop/data/'&lt;/span&gt;
&lt;span class="n"&gt;im_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'instacart_color.png'&lt;/span&gt;
&lt;span class="n"&gt;im_out_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'instacart_wc.png'&lt;/span&gt;

&lt;span class="c1"&gt;# select n_orders and aisles column from goods in R&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;R&lt;/span&gt; goods_tmp &lt;- goods[ ,c(6,3)] 

&lt;span class="c1"&gt;# make goods_tmp into pandas data frame in Python&lt;/span&gt;
&lt;span class="n"&gt;goods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rpy2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robjects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pandas2ri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ri2py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rpy2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robjects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goods_tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# convert data-frame to list of lists for consumption&lt;/span&gt;
&lt;span class="c1"&gt;#  by wordcloud.generate_from_frequencies(frequencies=d)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;goods&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# set stop words&lt;/span&gt;
&lt;span class="n"&gt;stopwords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STOPWORDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"said"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# read the mask image&lt;/span&gt;
&lt;span class="n"&gt;instacart_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# create coloring from image&lt;/span&gt;
&lt;span class="n"&gt;image_colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageColorGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instacart_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create wordcloud object&lt;/span&gt;
&lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCloud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;background_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;134&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instacart_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get word counts directly from list of lists&lt;/span&gt;
&lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_from_frequencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frequencies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="c1"&gt;# plot figure&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bilinear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# plot figure&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_colors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
           &lt;span class="n"&gt;interpolation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bilinear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# store to file&lt;/span&gt;
&lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im_out_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# plot figure&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instacart_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="n"&gt;interpolation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bilinear'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# show plot&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_svg output_subarea "&gt;
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Created with matplotlib (http://matplotlib.org/) --&gt;
&lt;svg height="252pt" version="1.1" viewbox="0 0 245 252" width="245pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs&gt;
&lt;style type="text/css"&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
&lt;/defs&gt;
&lt;g id="figure_1"&gt;
&lt;g id="patch_1"&gt;
&lt;path d="M 0 252.290164 
L 245.33932 252.290164 
L 245.33932 0 
L 0 0 
z
" style="fill:none;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="axes_1"&gt;
&lt;g clip-path="url(#p5c55a97d7f)"&gt;
&lt;image height="218" id="image92aaaa1924" transform="scale(1 -1)translate(0 -218)" width="195" x="39.65" xlink:href="data:image/png;base64,
" y="-10.412039"&gt;&lt;/image&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;defs&gt;
&lt;clippath id="p5c55a97d7f"&gt;
&lt;rect height="217.44" width="194.98932" x="39.65" y="10.972039"&gt;&lt;/rect&gt;
&lt;/clippath&gt;
&lt;/defs&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_svg output_subarea "&gt;
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Created with matplotlib (http://matplotlib.org/) --&gt;
&lt;svg height="252pt" version="1.1" viewbox="0 0 245 252" width="245pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs&gt;
&lt;style type="text/css"&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
&lt;/defs&gt;
&lt;g id="figure_1"&gt;
&lt;g id="patch_1"&gt;
&lt;path d="M 0 252.290164 
L 245.33932 252.290164 
L 245.33932 0 
L 0 0 
z
" style="fill:none;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="axes_1"&gt;
&lt;g clip-path="url(#pb5e30a6d09)"&gt;
&lt;image height="218" id="image33ab498937" transform="scale(1 -1)translate(0 -218)" width="195" x="39.65" xlink:href="data:image/png;base64,
" y="-10.412039"&gt;&lt;/image&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;defs&gt;
&lt;clippath id="pb5e30a6d09"&gt;
&lt;rect height="217.44" width="194.98932" x="39.65" y="10.972039"&gt;&lt;/rect&gt;
&lt;/clippath&gt;
&lt;/defs&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_svg output_subarea "&gt;
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Created with matplotlib (http://matplotlib.org/) --&gt;
&lt;svg height="252pt" version="1.1" viewbox="0 0 245 252" width="245pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs&gt;
&lt;style type="text/css"&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
&lt;/defs&gt;
&lt;g id="figure_1"&gt;
&lt;g id="patch_1"&gt;
&lt;path d="M 0 252.290164 
L 245.33932 252.290164 
L 245.33932 0 
L 0 0 
z
" style="fill:none;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="axes_1"&gt;
&lt;g clip-path="url(#p30a142c487)"&gt;
&lt;image height="218" id="image4deee4433a" transform="scale(1 -1)translate(0 -218)" width="195" x="39.65" xlink:href="data:image/png;base64,
" y="-10.412039"&gt;&lt;/image&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;defs&gt;
&lt;clippath id="p30a142c487"&gt;
&lt;rect height="217.44" width="194.98932" x="39.65" y="10.972039"&gt;&lt;/rect&gt;
&lt;/clippath&gt;
&lt;/defs&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['$','$'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        " linebreaks: { automatic: true, width: '95% container' }, " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img alt="Instacart Wordcloud" src="http://www.andrewtcrooks.com/2017/06/05/Data_Viz_DiagrammeR_and_wordcloud/instacart_wc.png"&gt;&lt;/p&gt;</content><category term="visualization"></category><category term="R"></category><category term="python"></category><category term="python3"></category><category term="rmagic"></category><category term="rpy2"></category><category term="pandas2ri"></category></entry><entry><title>How to setup Jupyter notebooks (Mac)</title><link href="http://www.andrewtcrooks.com/2017/05/17/jupyter-notebook-setup/" rel="alternate"></link><published>2017-05-17T00:00:00-07:00</published><updated>2017-05-17T00:00:00-07:00</updated><author><name>Andrew C.</name></author><id>tag:www.andrewtcrooks.com,2017-05-17:/2017/05/17/jupyter-notebook-setup/</id><summary type="html">&lt;p&gt;How to setup Jupyter Notebooks on Mac OS X.&lt;/p&gt;</summary><content type="html">&lt;p&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Follow the directions below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the latest version of Anaconda in the default location (~/anaconda/bin)                        [graphical installer recommended]&lt;/li&gt;
&lt;li&gt;Run Anaconda Navigator&lt;/li&gt;
&lt;li&gt;Select "Environmants" tab on the left&lt;/li&gt;
&lt;li&gt;Above the list of package names, change the drop-down menu from "Installed" to"Upgradable"&lt;/li&gt;
&lt;li&gt;In the "Search Packages" field, type "jupyter"&lt;/li&gt;
&lt;li&gt;Click on the little blue arrow to the right of each package name then select "Apply" at the bottom right.&lt;/li&gt;
&lt;li&gt;Run the following lines of code from a terminal to create a folder for the notebooks, generate the default configuration file, point jupyter to the newly created notebook folder, and set the static password (don't skip this!) &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;notebooks&lt;/span&gt; &lt;span class="c1"&gt;# create dir&lt;/span&gt;
&lt;span class="n"&gt;jupyter&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="c1"&gt;# generate ~/.jupyter/jupyter_notebook_config.py&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"c.NotebookApp.notebook_dir = '~/notebooks'"&lt;/span&gt; &lt;span class="o"&gt;&gt;&gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;jupyter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jupyter_notebook_config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; 
&lt;span class="n"&gt;jupyter&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="c1"&gt;# set password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;After entering a password, run the remaining code below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt; &lt;span class="c1"&gt;# create dir&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"~/anaconda/bin/jupyter notebook --port=8889 --no-browser"&lt;/span&gt; &lt;span class="o"&gt;&gt;&gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jpy_nbk_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; 
&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jpy_nbk_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="c1"&gt;# make script executable&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jpy_nbk_start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="c1"&gt;# run script&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The last part of the code made a directory for shell scripts, created a shell script to start the jupyter notebook server, made the script executable, and then ran the script.&lt;/p&gt;
&lt;p&gt;Everything is now installed and running.&lt;/p&gt;
&lt;p&gt;To access the notebook server, follow these final steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open localhost:8889 in a web browser to access your Jupyter notebook directory.&lt;/li&gt;
&lt;li&gt;At the password promt, enter the password you entered after the first batch of code.&lt;/li&gt;
&lt;li&gt;Let your browser remember the password so you don't have to type it every time you reload the page.&lt;/li&gt;
&lt;li&gt;Save a bookmark on the page you come to after opening localhost:8889.&lt;/li&gt;
&lt;li&gt;Select "New" from the upper right hand corner. Then select Python 3.&lt;/li&gt;
&lt;li&gt;Type your python code into a cell and hit shift+enter on your keyboard to run the cell&lt;/li&gt;
&lt;li&gt;From the menu bar, select Insert -&gt; Cell Above or Insert -&gt; Cell below to add cell relative to the currently selected one.&lt;/li&gt;
&lt;li&gt;Enjoy the possibilities!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pro Tip: Run ~/scripts/jpy_nbk_start.sh automatically at boot for a persistent notebook server on your computer! Otherwise, the script will need to be run again after every reboot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['$','$'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        " linebreaks: { automatic: true, width: '95% container' }, " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;
&lt;/p&gt;</content><category term="jupyter"></category><category term="notebook"></category><category term="osx"></category><category term="mac"></category><category term="linux"></category><category term="anaconda"></category><category term="ipython"></category><category term="python"></category><category term="python3"></category></entry></feed>